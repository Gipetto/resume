{"version":3,"file":"DmrhEZiJ.js","sources":["../../../../../../node_modules/svelte/src/store/shared/index.js","../../../../../../node_modules/@sveltejs/kit/src/exports/internal/index.js","../../../../../../node_modules/@sveltejs/kit/src/utils/url.js","../../../../../../node_modules/@sveltejs/kit/src/utils/hash.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/utils.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/client/fetcher.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/client/parse.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/client/session-storage.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/client/constants.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/client/utils.js","../../../../../../node_modules/@sveltejs/kit/src/utils/exports.js","../../../../../../node_modules/@sveltejs/kit/src/utils/array.js","../../../../../../node_modules/@sveltejs/kit/src/utils/error.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/client/state.svelte.js","../../../../../../node_modules/@sveltejs/kit/src/runtime/client/client.js"],"sourcesContent":["/** @import { Readable, StartStopNotifier, Subscriber, Unsubscriber, Updater, Writable } from '../public.js' */\n/** @import { Stores, StoresValues, SubscribeInvalidateTuple } from '../private.js' */\nimport { noop, run_all } from '../../internal/shared/utils.js';\nimport { safe_not_equal } from '../../internal/client/reactivity/equality.js';\nimport { subscribe_to_store } from '../utils.js';\n\n/**\n * @type {Array<SubscribeInvalidateTuple<any> | any>}\n */\nconst subscriber_queue = [];\n\n/**\n * Creates a `Readable` store that allows reading by subscription.\n *\n * @template T\n * @param {T} [value] initial value\n * @param {StartStopNotifier<T>} [start]\n * @returns {Readable<T>}\n */\nexport function readable(value, start) {\n\treturn {\n\t\tsubscribe: writable(value, start).subscribe\n\t};\n}\n\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n *\n * @template T\n * @param {T} [value] initial value\n * @param {StartStopNotifier<T>} [start]\n * @returns {Writable<T>}\n */\nexport function writable(value, start = noop) {\n\t/** @type {Unsubscriber | null} */\n\tlet stop = null;\n\n\t/** @type {Set<SubscribeInvalidateTuple<T>>} */\n\tconst subscribers = new Set();\n\n\t/**\n\t * @param {T} new_value\n\t * @returns {void}\n\t */\n\tfunction set(new_value) {\n\t\tif (safe_not_equal(value, new_value)) {\n\t\t\tvalue = new_value;\n\t\t\tif (stop) {\n\t\t\t\t// store is ready\n\t\t\t\tconst run_queue = !subscriber_queue.length;\n\t\t\t\tfor (const subscriber of subscribers) {\n\t\t\t\t\tsubscriber[1]();\n\t\t\t\t\tsubscriber_queue.push(subscriber, value);\n\t\t\t\t}\n\t\t\t\tif (run_queue) {\n\t\t\t\t\tfor (let i = 0; i < subscriber_queue.length; i += 2) {\n\t\t\t\t\t\tsubscriber_queue[i][0](subscriber_queue[i + 1]);\n\t\t\t\t\t}\n\t\t\t\t\tsubscriber_queue.length = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {Updater<T>} fn\n\t * @returns {void}\n\t */\n\tfunction update(fn) {\n\t\tset(fn(/** @type {T} */ (value)));\n\t}\n\n\t/**\n\t * @param {Subscriber<T>} run\n\t * @param {() => void} [invalidate]\n\t * @returns {Unsubscriber}\n\t */\n\tfunction subscribe(run, invalidate = noop) {\n\t\t/** @type {SubscribeInvalidateTuple<T>} */\n\t\tconst subscriber = [run, invalidate];\n\t\tsubscribers.add(subscriber);\n\t\tif (subscribers.size === 1) {\n\t\t\tstop = start(set, update) || noop;\n\t\t}\n\t\trun(/** @type {T} */ (value));\n\t\treturn () => {\n\t\t\tsubscribers.delete(subscriber);\n\t\t\tif (subscribers.size === 0 && stop) {\n\t\t\t\tstop();\n\t\t\t\tstop = null;\n\t\t\t}\n\t\t};\n\t}\n\treturn { set, update, subscribe };\n}\n\n/**\n * Derived value store by synchronizing one or more readable stores and\n * applying an aggregation function over its input values.\n *\n * @template {Stores} S\n * @template T\n * @overload\n * @param {S} stores\n * @param {(values: StoresValues<S>, set: (value: T) => void, update: (fn: Updater<T>) => void) => Unsubscriber | void} fn\n * @param {T} [initial_value]\n * @returns {Readable<T>}\n */\n/**\n * Derived value store by synchronizing one or more readable stores and\n * applying an aggregation function over its input values.\n *\n * @template {Stores} S\n * @template T\n * @overload\n * @param {S} stores\n * @param {(values: StoresValues<S>) => T} fn\n * @param {T} [initial_value]\n * @returns {Readable<T>}\n */\n/**\n * @template {Stores} S\n * @template T\n * @param {S} stores\n * @param {Function} fn\n * @param {T} [initial_value]\n * @returns {Readable<T>}\n */\nexport function derived(stores, fn, initial_value) {\n\tconst single = !Array.isArray(stores);\n\t/** @type {Array<Readable<any>>} */\n\tconst stores_array = single ? [stores] : stores;\n\tif (!stores_array.every(Boolean)) {\n\t\tthrow new Error('derived() expects stores as input, got a falsy value');\n\t}\n\tconst auto = fn.length < 2;\n\treturn readable(initial_value, (set, update) => {\n\t\tlet started = false;\n\t\t/** @type {T[]} */\n\t\tconst values = [];\n\t\tlet pending = 0;\n\t\tlet cleanup = noop;\n\t\tconst sync = () => {\n\t\t\tif (pending) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcleanup();\n\t\t\tconst result = fn(single ? values[0] : values, set, update);\n\t\t\tif (auto) {\n\t\t\t\tset(result);\n\t\t\t} else {\n\t\t\t\tcleanup = typeof result === 'function' ? result : noop;\n\t\t\t}\n\t\t};\n\t\tconst unsubscribers = stores_array.map((store, i) =>\n\t\t\tsubscribe_to_store(\n\t\t\t\tstore,\n\t\t\t\t(value) => {\n\t\t\t\t\tvalues[i] = value;\n\t\t\t\t\tpending &= ~(1 << i);\n\t\t\t\t\tif (started) {\n\t\t\t\t\t\tsync();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t() => {\n\t\t\t\t\tpending |= 1 << i;\n\t\t\t\t}\n\t\t\t)\n\t\t);\n\t\tstarted = true;\n\t\tsync();\n\t\treturn function stop() {\n\t\t\trun_all(unsubscribers);\n\t\t\tcleanup();\n\t\t\t// We need to set this to false because callbacks can still happen despite having unsubscribed:\n\t\t\t// Callbacks might already be placed in the queue which doesn't know it should no longer\n\t\t\t// invoke this derived store.\n\t\t\tstarted = false;\n\t\t};\n\t});\n}\n\n/**\n * Takes a store and returns a new one derived from the old one that is readable.\n *\n * @template T\n * @param {Readable<T>} store  - store to make readonly\n * @returns {Readable<T>}\n */\nexport function readonly(store) {\n\treturn {\n\t\t// @ts-expect-error TODO i suspect the bind is unnecessary\n\t\tsubscribe: store.subscribe.bind(store)\n\t};\n}\n\n/**\n * Get the current value from a store by subscribing and immediately unsubscribing.\n *\n * @template T\n * @param {Readable<T>} store\n * @returns {T}\n */\nexport function get(store) {\n\tlet value;\n\tsubscribe_to_store(store, (_) => (value = _))();\n\t// @ts-expect-error\n\treturn value;\n}\n","export class HttpError {\n\t/**\n\t * @param {number} status\n\t * @param {{message: string} extends App.Error ? (App.Error | string | undefined) : App.Error} body\n\t */\n\tconstructor(status, body) {\n\t\tthis.status = status;\n\t\tif (typeof body === 'string') {\n\t\t\tthis.body = { message: body };\n\t\t} else if (body) {\n\t\t\tthis.body = body;\n\t\t} else {\n\t\t\tthis.body = { message: `Error: ${status}` };\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn JSON.stringify(this.body);\n\t}\n}\n\nexport class Redirect {\n\t/**\n\t * @param {300 | 301 | 302 | 303 | 304 | 305 | 306 | 307 | 308} status\n\t * @param {string} location\n\t */\n\tconstructor(status, location) {\n\t\tthis.status = status;\n\t\tthis.location = location;\n\t}\n}\n\n/**\n * An error that was thrown from within the SvelteKit runtime that is not fatal and doesn't result in a 500, such as a 404.\n * `SvelteKitError` goes through `handleError`.\n * @extends Error\n */\nexport class SvelteKitError extends Error {\n\t/**\n\t * @param {number} status\n\t * @param {string} text\n\t * @param {string} message\n\t */\n\tconstructor(status, text, message) {\n\t\tsuper(message);\n\t\tthis.status = status;\n\t\tthis.text = text;\n\t}\n}\n\n/**\n * @template [T=undefined]\n */\nexport class ActionFailure {\n\t/**\n\t * @param {number} status\n\t * @param {T} data\n\t */\n\tconstructor(status, data) {\n\t\tthis.status = status;\n\t\tthis.data = data;\n\t}\n}\n\nexport { init_remote_functions } from './remote-functions.js';\n","import { BROWSER, DEV } from 'esm-env';\n\n/**\n * Matches a URI scheme. See https://www.rfc-editor.org/rfc/rfc3986#section-3.1\n * @type {RegExp}\n */\nexport const SCHEME = /^[a-z][a-z\\d+\\-.]+:/i;\n\nconst internal = new URL('sveltekit-internal://');\n\n/**\n * @param {string} base\n * @param {string} path\n */\nexport function resolve(base, path) {\n\t// special case\n\tif (path[0] === '/' && path[1] === '/') return path;\n\n\tlet url = new URL(base, internal);\n\turl = new URL(path, url);\n\n\treturn url.protocol === internal.protocol ? url.pathname + url.search + url.hash : url.href;\n}\n\n/** @param {string} path */\nexport function is_root_relative(path) {\n\treturn path[0] === '/' && path[1] !== '/';\n}\n\n/**\n * @param {string} path\n * @param {import('types').TrailingSlash} trailing_slash\n */\nexport function normalize_path(path, trailing_slash) {\n\tif (path === '/' || trailing_slash === 'ignore') return path;\n\n\tif (trailing_slash === 'never') {\n\t\treturn path.endsWith('/') ? path.slice(0, -1) : path;\n\t} else if (trailing_slash === 'always' && !path.endsWith('/')) {\n\t\treturn path + '/';\n\t}\n\n\treturn path;\n}\n\n/**\n * Decode pathname excluding %25 to prevent further double decoding of params\n * @param {string} pathname\n */\nexport function decode_pathname(pathname) {\n\treturn pathname.split('%25').map(decodeURI).join('%25');\n}\n\n/** @param {Record<string, string>} params */\nexport function decode_params(params) {\n\tfor (const key in params) {\n\t\t// input has already been decoded by decodeURI\n\t\t// now handle the rest\n\t\tparams[key] = decodeURIComponent(params[key]);\n\t}\n\n\treturn params;\n}\n\n/**\n * The error when a URL is malformed is not very helpful, so we augment it with the URI\n * @param {string} uri\n */\nexport function decode_uri(uri) {\n\ttry {\n\t\treturn decodeURI(uri);\n\t} catch (e) {\n\t\tif (e instanceof Error) {\n\t\t\te.message = `Failed to decode URI: ${uri}\\n` + e.message;\n\t\t}\n\t\tthrow e;\n\t}\n}\n\n/**\n * Returns everything up to the first `#` in a URL\n * @param {{href: string}} url_like\n */\nexport function strip_hash({ href }) {\n\treturn href.split('#')[0];\n}\n\n/**\n * @param {URL} url\n * @param {() => void} callback\n * @param {(search_param: string) => void} search_params_callback\n * @param {boolean} [allow_hash]\n */\nexport function make_trackable(url, callback, search_params_callback, allow_hash = false) {\n\tconst tracked = new URL(url);\n\n\tObject.defineProperty(tracked, 'searchParams', {\n\t\tvalue: new Proxy(tracked.searchParams, {\n\t\t\tget(obj, key) {\n\t\t\t\tif (key === 'get' || key === 'getAll' || key === 'has') {\n\t\t\t\t\treturn (/**@type {string}*/ param) => {\n\t\t\t\t\t\tsearch_params_callback(param);\n\t\t\t\t\t\treturn obj[key](param);\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// if they try to access something different from what is in `tracked_search_params_properties`\n\t\t\t\t// we track the whole url (entries, values, keys etc)\n\t\t\t\tcallback();\n\n\t\t\t\tconst value = Reflect.get(obj, key);\n\t\t\t\treturn typeof value === 'function' ? value.bind(obj) : value;\n\t\t\t}\n\t\t}),\n\t\tenumerable: true,\n\t\tconfigurable: true\n\t});\n\n\t/**\n\t * URL properties that could change during the lifetime of the page,\n\t * which excludes things like `origin`\n\t */\n\tconst tracked_url_properties = ['href', 'pathname', 'search', 'toString', 'toJSON'];\n\tif (allow_hash) tracked_url_properties.push('hash');\n\n\tfor (const property of tracked_url_properties) {\n\t\tObject.defineProperty(tracked, property, {\n\t\t\tget() {\n\t\t\t\tcallback();\n\t\t\t\t// @ts-expect-error\n\t\t\t\treturn url[property];\n\t\t\t},\n\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true\n\t\t});\n\t}\n\n\tif (!BROWSER) {\n\t\t// @ts-ignore\n\t\ttracked[Symbol.for('nodejs.util.inspect.custom')] = (depth, opts, inspect) => {\n\t\t\treturn inspect(url, opts);\n\t\t};\n\n\t\t// @ts-ignore\n\t\ttracked.searchParams[Symbol.for('nodejs.util.inspect.custom')] = (depth, opts, inspect) => {\n\t\t\treturn inspect(url.searchParams, opts);\n\t\t};\n\t}\n\n\tif ((DEV || !BROWSER) && !allow_hash) {\n\t\tdisable_hash(tracked);\n\t}\n\n\treturn tracked;\n}\n\n/**\n * Disallow access to `url.hash` on the server and in `load`\n * @param {URL} url\n */\nfunction disable_hash(url) {\n\tallow_nodejs_console_log(url);\n\n\tObject.defineProperty(url, 'hash', {\n\t\tget() {\n\t\t\tthrow new Error(\n\t\t\t\t'Cannot access event.url.hash. Consider using `page.url.hash` inside a component instead'\n\t\t\t);\n\t\t}\n\t});\n}\n\n/**\n * Disallow access to `url.search` and `url.searchParams` during prerendering\n * @param {URL} url\n */\nexport function disable_search(url) {\n\tallow_nodejs_console_log(url);\n\n\tfor (const property of ['search', 'searchParams']) {\n\t\tObject.defineProperty(url, property, {\n\t\t\tget() {\n\t\t\t\tthrow new Error(`Cannot access url.${property} on a page with prerendering enabled`);\n\t\t\t}\n\t\t});\n\t}\n}\n\n/**\n * Allow URL to be console logged, bypassing disabled properties.\n * @param {URL} url\n */\nfunction allow_nodejs_console_log(url) {\n\tif (!BROWSER) {\n\t\t// @ts-ignore\n\t\turl[Symbol.for('nodejs.util.inspect.custom')] = (depth, opts, inspect) => {\n\t\t\treturn inspect(new URL(url), opts);\n\t\t};\n\t}\n}\n","/**\n * Hash using djb2\n * @param {import('types').StrictBody[]} values\n */\nexport function hash(...values) {\n\tlet hash = 5381;\n\n\tfor (const value of values) {\n\t\tif (typeof value === 'string') {\n\t\t\tlet i = value.length;\n\t\t\twhile (i) hash = (hash * 33) ^ value.charCodeAt(--i);\n\t\t} else if (ArrayBuffer.isView(value)) {\n\t\t\tconst buffer = new Uint8Array(value.buffer, value.byteOffset, value.byteLength);\n\t\t\tlet i = buffer.length;\n\t\t\twhile (i) hash = (hash * 33) ^ buffer[--i];\n\t\t} else {\n\t\t\tthrow new TypeError('value must be a string or TypedArray');\n\t\t}\n\t}\n\n\treturn (hash >>> 0).toString(36);\n}\n","import { BROWSER } from 'esm-env';\n\nexport const text_encoder = new TextEncoder();\nexport const text_decoder = new TextDecoder();\n\n/**\n * Like node's path.relative, but without using node\n * @param {string} from\n * @param {string} to\n */\nexport function get_relative_path(from, to) {\n\tconst from_parts = from.split(/[/\\\\]/);\n\tconst to_parts = to.split(/[/\\\\]/);\n\tfrom_parts.pop(); // get dirname\n\n\twhile (from_parts[0] === to_parts[0]) {\n\t\tfrom_parts.shift();\n\t\tto_parts.shift();\n\t}\n\n\tlet i = from_parts.length;\n\twhile (i--) from_parts[i] = '..';\n\n\treturn from_parts.concat(to_parts).join('/');\n}\n\n/**\n * @param {Uint8Array} bytes\n * @returns {string}\n */\nexport function base64_encode(bytes) {\n\t// Using `Buffer` is faster than iterating\n\tif (!BROWSER && globalThis.Buffer) {\n\t\treturn globalThis.Buffer.from(bytes).toString('base64');\n\t}\n\n\tlet binary = '';\n\n\tfor (let i = 0; i < bytes.length; i++) {\n\t\tbinary += String.fromCharCode(bytes[i]);\n\t}\n\n\treturn btoa(binary);\n}\n\n/**\n * @param {string} encoded\n * @returns {Uint8Array}\n */\nexport function base64_decode(encoded) {\n\t// Using `Buffer` is faster than iterating\n\tif (!BROWSER && globalThis.Buffer) {\n\t\tconst buffer = globalThis.Buffer.from(encoded, 'base64');\n\t\treturn new Uint8Array(buffer);\n\t}\n\n\tconst binary = atob(encoded);\n\tconst bytes = new Uint8Array(binary.length);\n\n\tfor (let i = 0; i < binary.length; i++) {\n\t\tbytes[i] = binary.charCodeAt(i);\n\t}\n\n\treturn bytes;\n}\n","import { BROWSER, DEV } from 'esm-env';\nimport { hash } from '../../utils/hash.js';\nimport { base64_decode } from '../utils.js';\n\nlet loading = 0;\n\n/** @type {typeof fetch} */\nconst native_fetch = BROWSER ? window.fetch : /** @type {any} */ (() => {});\n\nexport function lock_fetch() {\n\tloading += 1;\n}\n\nexport function unlock_fetch() {\n\tloading -= 1;\n}\n\nif (DEV && BROWSER) {\n\tlet can_inspect_stack_trace = false;\n\n\t// detect whether async stack traces work\n\t// eslint-disable-next-line @typescript-eslint/require-await\n\tconst check_stack_trace = async () => {\n\t\tconst stack = /** @type {string} */ (new Error().stack);\n\t\tcan_inspect_stack_trace = stack.includes('check_stack_trace');\n\t};\n\n\tvoid check_stack_trace();\n\n\t/**\n\t * @param {RequestInfo | URL} input\n\t * @param {RequestInit & Record<string, any> | undefined} init\n\t */\n\twindow.fetch = (input, init) => {\n\t\t// Check if fetch was called via load_node. the lock method only checks if it was called at the\n\t\t// same time, but not necessarily if it was called from `load`.\n\t\t// We use just the filename as the method name sometimes does not appear on the CI.\n\t\tconst url = input instanceof Request ? input.url : input.toString();\n\t\tconst stack_array = /** @type {string} */ (new Error().stack).split('\\n');\n\t\t// We need to do a cutoff because Safari and Firefox maintain the stack\n\t\t// across events and for example traces a `fetch` call triggered from a button\n\t\t// back to the creation of the event listener and the element creation itself,\n\t\t// where at some point client.js will show up, leading to false positives.\n\t\tconst cutoff = stack_array.findIndex((a) => a.includes('load@') || a.includes('at load'));\n\t\tconst stack = stack_array.slice(0, cutoff + 2).join('\\n');\n\n\t\tconst in_load_heuristic = can_inspect_stack_trace\n\t\t\t? stack.includes('src/runtime/client/client.js')\n\t\t\t: loading;\n\n\t\t// This flag is set in initial_fetch and subsequent_fetch\n\t\tconst used_kit_fetch = init?.__sveltekit_fetch__;\n\n\t\tif (in_load_heuristic && !used_kit_fetch) {\n\t\t\tconsole.warn(\n\t\t\t\t`Loading ${url} using \\`window.fetch\\`. For best results, use the \\`fetch\\` that is passed to your \\`load\\` function: https://svelte.dev/docs/kit/load#making-fetch-requests`\n\t\t\t);\n\t\t}\n\n\t\tconst method = input instanceof Request ? input.method : init?.method || 'GET';\n\n\t\tif (method !== 'GET') {\n\t\t\tcache.delete(build_selector(input));\n\t\t}\n\n\t\treturn native_fetch(input, init);\n\t};\n} else if (BROWSER) {\n\twindow.fetch = (input, init) => {\n\t\tconst method = input instanceof Request ? input.method : init?.method || 'GET';\n\n\t\tif (method !== 'GET') {\n\t\t\tcache.delete(build_selector(input));\n\t\t}\n\n\t\treturn native_fetch(input, init);\n\t};\n}\n\nconst cache = new Map();\n\n/**\n * Should be called on the initial run of load functions that hydrate the page.\n * Saves any requests with cache-control max-age to the cache.\n * @param {URL | string} resource\n * @param {RequestInit} [opts]\n */\nexport function initial_fetch(resource, opts) {\n\tconst selector = build_selector(resource, opts);\n\n\tconst script = document.querySelector(selector);\n\tif (script?.textContent) {\n\t\tscript.remove(); // In case multiple script tags match the same selector\n\t\tlet { body, ...init } = JSON.parse(script.textContent);\n\n\t\tconst ttl = script.getAttribute('data-ttl');\n\t\tif (ttl) cache.set(selector, { body, init, ttl: 1000 * Number(ttl) });\n\t\tconst b64 = script.getAttribute('data-b64');\n\t\tif (b64 !== null) {\n\t\t\t// Can't use native_fetch('data:...;base64,${body}')\n\t\t\t// csp can block the request\n\t\t\tbody = base64_decode(body);\n\t\t}\n\n\t\treturn Promise.resolve(new Response(body, init));\n\t}\n\n\treturn DEV ? dev_fetch(resource, opts) : window.fetch(resource, opts);\n}\n\n/**\n * Tries to get the response from the cache, if max-age allows it, else does a fetch.\n * @param {URL | string} resource\n * @param {string} resolved\n * @param {RequestInit} [opts]\n */\nexport function subsequent_fetch(resource, resolved, opts) {\n\tif (cache.size > 0) {\n\t\tconst selector = build_selector(resource, opts);\n\t\tconst cached = cache.get(selector);\n\t\tif (cached) {\n\t\t\t// https://developer.mozilla.org/en-US/docs/Web/API/Request/cache#value\n\t\t\tif (\n\t\t\t\tperformance.now() < cached.ttl &&\n\t\t\t\t['default', 'force-cache', 'only-if-cached', undefined].includes(opts?.cache)\n\t\t\t) {\n\t\t\t\treturn new Response(cached.body, cached.init);\n\t\t\t}\n\n\t\t\tcache.delete(selector);\n\t\t}\n\t}\n\n\treturn DEV ? dev_fetch(resolved, opts) : window.fetch(resolved, opts);\n}\n\n/**\n * @param {RequestInfo | URL} resource\n * @param {RequestInit & Record<string, any> | undefined} opts\n */\nexport function dev_fetch(resource, opts) {\n\tconst patched_opts = { ...opts };\n\t// This assigns the __sveltekit_fetch__ flag and makes it non-enumerable\n\tObject.defineProperty(patched_opts, '__sveltekit_fetch__', {\n\t\tvalue: true,\n\t\twritable: true,\n\t\tconfigurable: true\n\t});\n\treturn window.fetch(resource, patched_opts);\n}\n\n/**\n * Build the cache key for a given request\n * @param {URL | RequestInfo} resource\n * @param {RequestInit} [opts]\n */\nfunction build_selector(resource, opts) {\n\tconst url = JSON.stringify(resource instanceof Request ? resource.url : resource);\n\n\tlet selector = `script[data-sveltekit-fetched][data-url=${url}]`;\n\n\tif (opts?.headers || opts?.body) {\n\t\t/** @type {import('types').StrictBody[]} */\n\t\tconst values = [];\n\n\t\tif (opts.headers) {\n\t\t\tvalues.push([...new Headers(opts.headers)].join(','));\n\t\t}\n\n\t\tif (opts.body && (typeof opts.body === 'string' || ArrayBuffer.isView(opts.body))) {\n\t\t\tvalues.push(opts.body);\n\t\t}\n\n\t\tselector += `[data-hash=\"${hash(...values)}\"]`;\n\t}\n\n\treturn selector;\n}\n","import { exec, parse_route_id } from '../../utils/routing.js';\n\n/**\n * @param {import('./types.js').SvelteKitApp} app\n * @returns {import('types').CSRRoute[]}\n */\nexport function parse({ nodes, server_loads, dictionary, matchers }) {\n\tconst layouts_with_server_load = new Set(server_loads);\n\n\treturn Object.entries(dictionary).map(([id, [leaf, layouts, errors]]) => {\n\t\tconst { pattern, params } = parse_route_id(id);\n\n\t\t/** @type {import('types').CSRRoute} */\n\t\tconst route = {\n\t\t\tid,\n\t\t\t/** @param {string} path */\n\t\t\texec: (path) => {\n\t\t\t\tconst match = pattern.exec(path);\n\t\t\t\tif (match) return exec(match, params, matchers);\n\t\t\t},\n\t\t\terrors: [1, ...(errors || [])].map((n) => nodes[n]),\n\t\t\tlayouts: [0, ...(layouts || [])].map(create_layout_loader),\n\t\t\tleaf: create_leaf_loader(leaf)\n\t\t};\n\n\t\t// bit of a hack, but ensures that layout/error node lists are the same\n\t\t// length, without which the wrong data will be applied if the route\n\t\t// manifest looks like `[[a, b], [c,], d]`\n\t\troute.errors.length = route.layouts.length = Math.max(\n\t\t\troute.errors.length,\n\t\t\troute.layouts.length\n\t\t);\n\n\t\treturn route;\n\t});\n\n\t/**\n\t * @param {number} id\n\t * @returns {[boolean, import('types').CSRPageNodeLoader]}\n\t */\n\tfunction create_leaf_loader(id) {\n\t\t// whether or not the route uses the server data is\n\t\t// encoded using the ones' complement, to save space\n\t\tconst uses_server_data = id < 0;\n\t\tif (uses_server_data) id = ~id;\n\t\treturn [uses_server_data, nodes[id]];\n\t}\n\n\t/**\n\t * @param {number | undefined} id\n\t * @returns {[boolean, import('types').CSRPageNodeLoader] | undefined}\n\t */\n\tfunction create_layout_loader(id) {\n\t\t// whether or not the layout uses the server data is\n\t\t// encoded in the layouts array, to save space\n\t\treturn id === undefined ? id : [layouts_with_server_load.has(id), nodes[id]];\n\t}\n}\n\n/**\n * @param {import('types').CSRRouteServer} input\n * @param {import('types').CSRPageNodeLoader[]} app_nodes Will be modified if a new node is loaded that's not already in the array\n * @returns {import('types').CSRRoute}\n */\nexport function parse_server_route({ nodes, id, leaf, layouts, errors }, app_nodes) {\n\treturn {\n\t\tid,\n\t\texec: () => ({}), // dummy function; exec already happened on the server\n\t\t// By writing to app_nodes only when a loader at that index is not already defined,\n\t\t// we ensure that loaders have referential equality when they load the same node.\n\t\t// Code elsewhere in client.js relies on this referential equality to determine\n\t\t// if a loader is different and should therefore (re-)run.\n\t\terrors: errors.map((n) => (n ? (app_nodes[n] ||= nodes[n]) : undefined)),\n\t\tlayouts: layouts.map((n) => (n ? [n[0], (app_nodes[n[1]] ||= nodes[n[1]])] : undefined)),\n\t\tleaf: [leaf[0], (app_nodes[leaf[1]] ||= nodes[leaf[1]])]\n\t};\n}\n","/**\n * Read a value from `sessionStorage`\n * @param {string} key\n * @param {(value: string) => any} parse\n */\n/*@__NO_SIDE_EFFECTS__*/\nexport function get(key, parse = JSON.parse) {\n\ttry {\n\t\treturn parse(sessionStorage[key]);\n\t} catch {\n\t\t// do nothing\n\t}\n}\n\n/**\n * Write a value to `sessionStorage`\n * @param {string} key\n * @param {any} value\n * @param {(value: any) => string} stringify\n */\nexport function set(key, value, stringify = JSON.stringify) {\n\tconst data = stringify(value);\n\ttry {\n\t\tsessionStorage[key] = data;\n\t} catch {\n\t\t// do nothing\n\t}\n}\n","export const SNAPSHOT_KEY = 'sveltekit:snapshot';\nexport const SCROLL_KEY = 'sveltekit:scroll';\nexport const STATES_KEY = 'sveltekit:states';\nexport const PAGE_URL_KEY = 'sveltekit:pageurl';\n\nexport const HISTORY_INDEX = 'sveltekit:history';\nexport const NAVIGATION_INDEX = 'sveltekit:navigation';\n\nexport const PRELOAD_PRIORITIES = /** @type {const} */ ({\n\ttap: 1,\n\thover: 2,\n\tviewport: 3,\n\teager: 4,\n\toff: -1,\n\tfalse: -1\n});\n","import { BROWSER, DEV } from 'esm-env';\nimport { writable } from 'svelte/store';\nimport { assets } from '$app/paths';\nimport { version } from '__sveltekit/environment';\nimport { PRELOAD_PRIORITIES } from './constants.js';\n\n/* global __SVELTEKIT_APP_VERSION_FILE__, __SVELTEKIT_APP_VERSION_POLL_INTERVAL__ */\n\nexport const origin = BROWSER ? location.origin : '';\n\n/** @param {string | URL} url */\nexport function resolve_url(url) {\n\tif (url instanceof URL) return url;\n\n\tlet baseURI = document.baseURI;\n\n\tif (!baseURI) {\n\t\tconst baseTags = document.getElementsByTagName('base');\n\t\tbaseURI = baseTags.length ? baseTags[0].href : document.URL;\n\t}\n\n\treturn new URL(url, baseURI);\n}\n\nexport function scroll_state() {\n\treturn {\n\t\tx: pageXOffset,\n\t\ty: pageYOffset\n\t};\n}\n\nconst warned = new WeakSet();\n\n/** @typedef {keyof typeof valid_link_options} LinkOptionName */\n\nconst valid_link_options = /** @type {const} */ ({\n\t'preload-code': ['', 'off', 'false', 'tap', 'hover', 'viewport', 'eager'],\n\t'preload-data': ['', 'off', 'false', 'tap', 'hover'],\n\tkeepfocus: ['', 'true', 'off', 'false'],\n\tnoscroll: ['', 'true', 'off', 'false'],\n\treload: ['', 'true', 'off', 'false'],\n\treplacestate: ['', 'true', 'off', 'false']\n});\n\n/**\n * @template {LinkOptionName} T\n * @typedef {typeof valid_link_options[T][number]} ValidLinkOptions\n */\n\n/**\n * @template {LinkOptionName} T\n * @param {Element} element\n * @param {T} name\n */\nfunction link_option(element, name) {\n\tconst value = /** @type {ValidLinkOptions<T> | null} */ (\n\t\telement.getAttribute(`data-sveltekit-${name}`)\n\t);\n\n\tif (DEV) {\n\t\tvalidate_link_option(element, name, value);\n\t}\n\n\treturn value;\n}\n\n/**\n * @template {LinkOptionName} T\n * @template {ValidLinkOptions<T> | null} U\n * @param {Element} element\n * @param {T} name\n * @param {U} value\n */\nfunction validate_link_option(element, name, value) {\n\tif (value === null) return;\n\n\t// @ts-expect-error - includes is dumb\n\tif (!warned.has(element) && !valid_link_options[name].includes(value)) {\n\t\tconsole.error(\n\t\t\t`Unexpected value for ${name} — should be one of ${valid_link_options[name]\n\t\t\t\t.map((option) => JSON.stringify(option))\n\t\t\t\t.join(', ')}`,\n\t\t\telement\n\t\t);\n\n\t\twarned.add(element);\n\t}\n}\n\nconst levels = {\n\t...PRELOAD_PRIORITIES,\n\t'': PRELOAD_PRIORITIES.hover\n};\n\n/**\n * @param {Element} element\n * @returns {Element | null}\n */\nfunction parent_element(element) {\n\tlet parent = element.assignedSlot ?? element.parentNode;\n\n\t// @ts-expect-error handle shadow roots\n\tif (parent?.nodeType === 11) parent = parent.host;\n\n\treturn /** @type {Element} */ (parent);\n}\n\n/**\n * @param {Element} element\n * @param {Element} target\n */\nexport function find_anchor(element, target) {\n\twhile (element && element !== target) {\n\t\tif (element.nodeName.toUpperCase() === 'A' && element.hasAttribute('href')) {\n\t\t\treturn /** @type {HTMLAnchorElement | SVGAElement} */ (element);\n\t\t}\n\n\t\telement = /** @type {Element} */ (parent_element(element));\n\t}\n}\n\n/**\n * @param {HTMLAnchorElement | SVGAElement} a\n * @param {string} base\n * @param {boolean} uses_hash_router\n */\nexport function get_link_info(a, base, uses_hash_router) {\n\t/** @type {URL | undefined} */\n\tlet url;\n\n\ttry {\n\t\turl = new URL(a instanceof SVGAElement ? a.href.baseVal : a.href, document.baseURI);\n\n\t\t// if the hash doesn't start with `#/` then it's probably linking to an id on the current page\n\t\tif (uses_hash_router && url.hash.match(/^#[^/]/)) {\n\t\t\tconst route = location.hash.split('#')[1] || '/';\n\t\t\turl.hash = `#${route}${url.hash}`;\n\t\t}\n\t} catch {}\n\n\tconst target = a instanceof SVGAElement ? a.target.baseVal : a.target;\n\n\tconst external =\n\t\t!url ||\n\t\t!!target ||\n\t\tis_external_url(url, base, uses_hash_router) ||\n\t\t(a.getAttribute('rel') || '').split(/\\s+/).includes('external');\n\n\tconst download = url?.origin === origin && a.hasAttribute('download');\n\n\treturn { url, external, target, download };\n}\n\n/**\n * @param {HTMLFormElement | HTMLAnchorElement | SVGAElement} element\n */\nexport function get_router_options(element) {\n\t/** @type {ValidLinkOptions<'keepfocus'> | null} */\n\tlet keepfocus = null;\n\n\t/** @type {ValidLinkOptions<'noscroll'> | null} */\n\tlet noscroll = null;\n\n\t/** @type {ValidLinkOptions<'preload-code'> | null} */\n\tlet preload_code = null;\n\n\t/** @type {ValidLinkOptions<'preload-data'> | null} */\n\tlet preload_data = null;\n\n\t/** @type {ValidLinkOptions<'reload'> | null} */\n\tlet reload = null;\n\n\t/** @type {ValidLinkOptions<'replacestate'> | null} */\n\tlet replace_state = null;\n\n\t/** @type {Element} */\n\tlet el = element;\n\n\twhile (el && el !== document.documentElement) {\n\t\tif (preload_code === null) preload_code = link_option(el, 'preload-code');\n\t\tif (preload_data === null) preload_data = link_option(el, 'preload-data');\n\t\tif (keepfocus === null) keepfocus = link_option(el, 'keepfocus');\n\t\tif (noscroll === null) noscroll = link_option(el, 'noscroll');\n\t\tif (reload === null) reload = link_option(el, 'reload');\n\t\tif (replace_state === null) replace_state = link_option(el, 'replacestate');\n\n\t\tel = /** @type {Element} */ (parent_element(el));\n\t}\n\n\t/** @param {string | null} value */\n\tfunction get_option_state(value) {\n\t\tswitch (value) {\n\t\t\tcase '':\n\t\t\tcase 'true':\n\t\t\t\treturn true;\n\t\t\tcase 'off':\n\t\t\tcase 'false':\n\t\t\t\treturn false;\n\t\t\tdefault:\n\t\t\t\treturn undefined;\n\t\t}\n\t}\n\n\treturn {\n\t\tpreload_code: levels[preload_code ?? 'off'],\n\t\tpreload_data: levels[preload_data ?? 'off'],\n\t\tkeepfocus: get_option_state(keepfocus),\n\t\tnoscroll: get_option_state(noscroll),\n\t\treload: get_option_state(reload),\n\t\treplace_state: get_option_state(replace_state)\n\t};\n}\n\n/** @param {any} value */\nexport function notifiable_store(value) {\n\tconst store = writable(value);\n\tlet ready = true;\n\n\tfunction notify() {\n\t\tready = true;\n\t\tstore.update((val) => val);\n\t}\n\n\t/** @param {any} new_value */\n\tfunction set(new_value) {\n\t\tready = false;\n\t\tstore.set(new_value);\n\t}\n\n\t/** @param {(value: any) => void} run */\n\tfunction subscribe(run) {\n\t\t/** @type {any} */\n\t\tlet old_value;\n\t\treturn store.subscribe((new_value) => {\n\t\t\tif (old_value === undefined || (ready && new_value !== old_value)) {\n\t\t\t\trun((old_value = new_value));\n\t\t\t}\n\t\t});\n\t}\n\n\treturn { notify, set, subscribe };\n}\n\nexport const updated_listener = {\n\tv: () => {}\n};\n\nexport function create_updated_store() {\n\tconst { set, subscribe } = writable(false);\n\n\tif (DEV || !BROWSER) {\n\t\treturn {\n\t\t\tsubscribe,\n\t\t\t// eslint-disable-next-line @typescript-eslint/require-await\n\t\t\tcheck: async () => false\n\t\t};\n\t}\n\n\tconst interval = __SVELTEKIT_APP_VERSION_POLL_INTERVAL__;\n\n\t/** @type {NodeJS.Timeout} */\n\tlet timeout;\n\n\t/** @type {() => Promise<boolean>} */\n\tasync function check() {\n\t\tclearTimeout(timeout);\n\n\t\tif (interval) timeout = setTimeout(check, interval);\n\n\t\ttry {\n\t\t\tconst res = await fetch(`${assets}/${__SVELTEKIT_APP_VERSION_FILE__}`, {\n\t\t\t\theaders: {\n\t\t\t\t\tpragma: 'no-cache',\n\t\t\t\t\t'cache-control': 'no-cache'\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (!res.ok) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst data = await res.json();\n\t\t\tconst updated = data.version !== version;\n\n\t\t\tif (updated) {\n\t\t\t\tset(true);\n\t\t\t\tupdated_listener.v();\n\t\t\t\tclearTimeout(timeout);\n\t\t\t}\n\n\t\t\treturn updated;\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif (interval) timeout = setTimeout(check, interval);\n\n\treturn {\n\t\tsubscribe,\n\t\tcheck\n\t};\n}\n\n/**\n * Is external if\n * - origin different\n * - path doesn't start with base\n * - uses hash router and pathname is more than base\n * @param {URL} url\n * @param {string} base\n * @param {boolean} hash_routing\n */\nexport function is_external_url(url, base, hash_routing) {\n\tif (url.origin !== origin || !url.pathname.startsWith(base)) {\n\t\treturn true;\n\t}\n\n\tif (hash_routing) {\n\t\tif (url.pathname === base + '/' || url.pathname === base + '/index.html') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// be lenient if serving from filesystem\n\t\tif (url.protocol === 'file:' && url.pathname.replace(/\\/[^/]+\\.html?$/, '') === base) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/** @type {Record<string, boolean>} */\nconst seen = {};\n\n/**\n * Used for server-side resolution, to replicate Vite's CSS loading behaviour in production.\n *\n * Closely modelled after https://github.com/vitejs/vite/blob/3dd12f4724130fdf8ba44c6d3252ebdff407fd47/packages/vite/src/node/plugins/importAnalysisBuild.ts#L214\n * (which ideally we could just use directly, but it's not exported)\n * @param {string[]} deps\n */\nexport function load_css(deps) {\n\tif (__SVELTEKIT_CLIENT_ROUTING__) return;\n\n\tconst csp_nonce_meta = /** @type {HTMLMetaElement} */ (\n\t\tdocument.querySelector('meta[property=csp-nonce]')\n\t);\n\tconst csp_nonce = csp_nonce_meta?.nonce || csp_nonce_meta?.getAttribute('nonce');\n\n\tfor (const dep of deps) {\n\t\tif (dep in seen) continue;\n\t\tseen[dep] = true;\n\n\t\tif (document.querySelector(`link[href=\"${dep}\"][rel=\"stylesheet\"]`)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst link = document.createElement('link');\n\t\tlink.rel = 'stylesheet';\n\t\tlink.crossOrigin = '';\n\t\tlink.href = dep;\n\t\tif (csp_nonce) {\n\t\t\tlink.setAttribute('nonce', csp_nonce);\n\t\t}\n\t\tdocument.head.appendChild(link);\n\t}\n}\n","/**\n * @param {Set<string>} expected\n */\nfunction validator(expected) {\n\t/**\n\t * @param {any} module\n\t * @param {string} [file]\n\t */\n\tfunction validate(module, file) {\n\t\tif (!module) return;\n\n\t\tfor (const key in module) {\n\t\t\tif (key[0] === '_' || expected.has(key)) continue; // key is valid in this module\n\n\t\t\tconst values = [...expected.values()];\n\n\t\t\tconst hint =\n\t\t\t\thint_for_supported_files(key, file?.slice(file.lastIndexOf('.'))) ??\n\t\t\t\t`valid exports are ${values.join(', ')}, or anything with a '_' prefix`;\n\n\t\t\tthrow new Error(`Invalid export '${key}'${file ? ` in ${file}` : ''} (${hint})`);\n\t\t}\n\t}\n\n\treturn validate;\n}\n\n/**\n * @param {string} key\n * @param {string} ext\n * @returns {string | void}\n */\nfunction hint_for_supported_files(key, ext = '.js') {\n\tconst supported_files = [];\n\n\tif (valid_layout_exports.has(key)) {\n\t\tsupported_files.push(`+layout${ext}`);\n\t}\n\n\tif (valid_page_exports.has(key)) {\n\t\tsupported_files.push(`+page${ext}`);\n\t}\n\n\tif (valid_layout_server_exports.has(key)) {\n\t\tsupported_files.push(`+layout.server${ext}`);\n\t}\n\n\tif (valid_page_server_exports.has(key)) {\n\t\tsupported_files.push(`+page.server${ext}`);\n\t}\n\n\tif (valid_server_exports.has(key)) {\n\t\tsupported_files.push(`+server${ext}`);\n\t}\n\n\tif (supported_files.length > 0) {\n\t\treturn `'${key}' is a valid export in ${supported_files.slice(0, -1).join(', ')}${\n\t\t\tsupported_files.length > 1 ? ' or ' : ''\n\t\t}${supported_files.at(-1)}`;\n\t}\n}\n\nconst valid_layout_exports = new Set([\n\t'load',\n\t'prerender',\n\t'csr',\n\t'ssr',\n\t'trailingSlash',\n\t'config'\n]);\nconst valid_page_exports = new Set([...valid_layout_exports, 'entries']);\nconst valid_layout_server_exports = new Set([...valid_layout_exports]);\nconst valid_page_server_exports = new Set([...valid_layout_server_exports, 'actions', 'entries']);\nconst valid_server_exports = new Set([\n\t'GET',\n\t'POST',\n\t'PATCH',\n\t'PUT',\n\t'DELETE',\n\t'OPTIONS',\n\t'HEAD',\n\t'fallback',\n\t'prerender',\n\t'trailingSlash',\n\t'config',\n\t'entries'\n]);\n\nexport const validate_layout_exports = validator(valid_layout_exports);\nexport const validate_page_exports = validator(valid_page_exports);\nexport const validate_layout_server_exports = validator(valid_layout_server_exports);\nexport const validate_page_server_exports = validator(valid_page_server_exports);\nexport const validate_server_exports = validator(valid_server_exports);\n","/**\n * Removes nullish values from an array.\n *\n * @template T\n * @param {Array<T>} arr\n */\nexport function compact(arr) {\n\treturn arr.filter(/** @returns {val is NonNullable<T>} */ (val) => val != null);\n}\n","import { HttpError, SvelteKitError } from '@sveltejs/kit/internal';\n\n/**\n * @param {unknown} err\n * @return {Error}\n */\nexport function coalesce_to_error(err) {\n\treturn err instanceof Error ||\n\t\t(err && /** @type {any} */ (err).name && /** @type {any} */ (err).message)\n\t\t? /** @type {Error} */ (err)\n\t\t: new Error(JSON.stringify(err));\n}\n\n/**\n * This is an identity function that exists to make TypeScript less\n * paranoid about people throwing things that aren't errors, which\n * frankly is not something we should care about\n * @param {unknown} error\n */\nexport function normalize_error(error) {\n\treturn /** @type {import('../exports/internal/index.js').Redirect | HttpError | SvelteKitError | Error} */ (\n\t\terror\n\t);\n}\n\n/**\n * @param {unknown} error\n */\nexport function get_status(error) {\n\treturn error instanceof HttpError || error instanceof SvelteKitError ? error.status : 500;\n}\n\n/**\n * @param {unknown} error\n */\nexport function get_message(error) {\n\treturn error instanceof SvelteKitError ? error.text : 'Internal Error';\n}\n","import { onMount } from 'svelte';\nimport { updated_listener } from './utils.js';\n\n/** @type {import('@sveltejs/kit').Page} */\nexport let page;\n\n/** @type {{ current: import('@sveltejs/kit').Navigation | null }} */\nexport let navigating;\n\n/** @type {{ current: boolean }} */\nexport let updated;\n\n// this is a bootleg way to tell if we're in old svelte or new svelte\nconst is_legacy =\n\tonMount.toString().includes('$$') || /function \\w+\\(\\) \\{\\}/.test(onMount.toString());\n\nif (is_legacy) {\n\tpage = {\n\t\tdata: {},\n\t\tform: null,\n\t\terror: null,\n\t\tparams: {},\n\t\troute: { id: null },\n\t\tstate: {},\n\t\tstatus: -1,\n\t\turl: new URL('https://example.com')\n\t};\n\tnavigating = { current: null };\n\tupdated = { current: false };\n} else {\n\tpage = new (class Page {\n\t\tdata = $state.raw({});\n\t\tform = $state.raw(null);\n\t\terror = $state.raw(null);\n\t\tparams = $state.raw({});\n\t\troute = $state.raw({ id: null });\n\t\tstate = $state.raw({});\n\t\tstatus = $state.raw(-1);\n\t\turl = $state.raw(new URL('https://example.com'));\n\t})();\n\n\tnavigating = new (class Navigating {\n\t\tcurrent = $state.raw(null);\n\t})();\n\n\tupdated = new (class Updated {\n\t\tcurrent = $state.raw(false);\n\t})();\n\tupdated_listener.v = () => (updated.current = true);\n}\n\n/**\n * @param {import('@sveltejs/kit').Page} new_page\n */\nexport function update(new_page) {\n\tObject.assign(page, new_page);\n}\n","import { BROWSER, DEV } from 'esm-env';\nimport * as svelte from 'svelte';\nimport { HttpError, Redirect, SvelteKitError } from '@sveltejs/kit/internal';\nconst { onMount, tick } = svelte;\n// Svelte 4 and under don't have `untrack`, so we have to fallback if `untrack` is not exported\nconst untrack = svelte.untrack ?? ((value) => value());\nimport {\n\tdecode_params,\n\tdecode_pathname,\n\tstrip_hash,\n\tmake_trackable,\n\tnormalize_path\n} from '../../utils/url.js';\nimport { dev_fetch, initial_fetch, lock_fetch, subsequent_fetch, unlock_fetch } from './fetcher.js';\nimport { parse, parse_server_route } from './parse.js';\nimport * as storage from './session-storage.js';\nimport {\n\tfind_anchor,\n\tresolve_url,\n\tget_link_info,\n\tget_router_options,\n\tis_external_url,\n\torigin,\n\tscroll_state,\n\tnotifiable_store,\n\tcreate_updated_store,\n\tload_css\n} from './utils.js';\nimport { base } from '$app/paths';\nimport * as devalue from 'devalue';\nimport {\n\tHISTORY_INDEX,\n\tNAVIGATION_INDEX,\n\tPRELOAD_PRIORITIES,\n\tSCROLL_KEY,\n\tSTATES_KEY,\n\tSNAPSHOT_KEY,\n\tPAGE_URL_KEY\n} from './constants.js';\nimport { validate_page_exports } from '../../utils/exports.js';\nimport { compact } from '../../utils/array.js';\nimport {\n\tINVALIDATED_PARAM,\n\tTRAILING_SLASH_PARAM,\n\tvalidate_depends,\n\tvalidate_load_response\n} from '../shared.js';\nimport { get_message, get_status } from '../../utils/error.js';\nimport { writable } from 'svelte/store';\nimport { page, update, navigating } from './state.svelte.js';\nimport { add_data_suffix, add_resolution_suffix } from '../pathname.js';\nimport { noop_span } from '../telemetry/noop.js';\nimport { text_decoder } from '../utils.js';\n\nexport { load_css };\nconst ICON_REL_ATTRIBUTES = new Set(['icon', 'shortcut icon', 'apple-touch-icon']);\n\nlet errored = false;\n\n// We track the scroll position associated with each history entry in sessionStorage,\n// rather than on history.state itself, because when navigation is driven by\n// popstate it's too late to update the scroll position associated with the\n// state we're navigating from\n/**\n * history index -> { x, y }\n * @type {Record<number, { x: number; y: number }>}\n */\nconst scroll_positions = storage.get(SCROLL_KEY) ?? {};\n\n/**\n * navigation index -> any\n * @type {Record<string, any[]>}\n */\nconst snapshots = storage.get(SNAPSHOT_KEY) ?? {};\n\nif (DEV && BROWSER) {\n\tlet warned = false;\n\n\tconst current_module_url = import.meta.url.split('?')[0]; // remove query params that vite adds to the URL when it is loaded from node_modules\n\n\tconst warn = () => {\n\t\tif (warned) return;\n\n\t\t// Rather than saving a pointer to the original history methods, which would prevent monkeypatching by other libs,\n\t\t// inspect the stack trace to see if we're being called from within SvelteKit.\n\t\tlet stack = new Error().stack?.split('\\n');\n\t\tif (!stack) return;\n\t\tif (!stack[0].includes('https:') && !stack[0].includes('http:')) stack = stack.slice(1); // Chrome includes the error message in the stack\n\t\tstack = stack.slice(2); // remove `warn` and the place where `warn` was called\n\t\t// Can be falsy if was called directly from an anonymous function\n\t\tif (stack[0]?.includes(current_module_url)) return;\n\n\t\twarned = true;\n\n\t\tconsole.warn(\n\t\t\t\"Avoid using `history.pushState(...)` and `history.replaceState(...)` as these will conflict with SvelteKit's router. Use the `pushState` and `replaceState` imports from `$app/navigation` instead.\"\n\t\t);\n\t};\n\n\tconst push_state = history.pushState;\n\thistory.pushState = (...args) => {\n\t\twarn();\n\t\treturn push_state.apply(history, args);\n\t};\n\n\tconst replace_state = history.replaceState;\n\thistory.replaceState = (...args) => {\n\t\twarn();\n\t\treturn replace_state.apply(history, args);\n\t};\n}\n\nexport const stores = {\n\turl: /* @__PURE__ */ notifiable_store({}),\n\tpage: /* @__PURE__ */ notifiable_store({}),\n\tnavigating: /* @__PURE__ */ writable(\n\t\t/** @type {import('@sveltejs/kit').Navigation | null} */ (null)\n\t),\n\tupdated: /* @__PURE__ */ create_updated_store()\n};\n\n/** @param {number} index */\nfunction update_scroll_positions(index) {\n\tscroll_positions[index] = scroll_state();\n}\n\n/**\n * @param {number} current_history_index\n * @param {number} current_navigation_index\n */\nfunction clear_onward_history(current_history_index, current_navigation_index) {\n\t// if we navigated back, then pushed a new state, we can\n\t// release memory by pruning the scroll/snapshot lookup\n\tlet i = current_history_index + 1;\n\twhile (scroll_positions[i]) {\n\t\tdelete scroll_positions[i];\n\t\ti += 1;\n\t}\n\n\ti = current_navigation_index + 1;\n\twhile (snapshots[i]) {\n\t\tdelete snapshots[i];\n\t\ti += 1;\n\t}\n}\n\n/**\n * Loads `href` the old-fashioned way, with a full page reload.\n * Returns a `Promise` that never resolves (to prevent any\n * subsequent work, e.g. history manipulation, from happening)\n * @param {URL} url\n * @param {boolean} [replace] If `true`, will replace the current `history` entry rather than creating a new one with `pushState`\n */\nfunction native_navigation(url, replace = false) {\n\tif (replace) {\n\t\tlocation.replace(url.href);\n\t} else {\n\t\tlocation.href = url.href;\n\t}\n\treturn new Promise(() => {});\n}\n\n/**\n * Checks whether a service worker is registered, and if it is,\n * tries to update it.\n */\nasync function update_service_worker() {\n\tif ('serviceWorker' in navigator) {\n\t\tconst registration = await navigator.serviceWorker.getRegistration(base || '/');\n\t\tif (registration) {\n\t\t\tawait registration.update();\n\t\t}\n\t}\n}\n\nfunction noop() {}\n\n/** @type {import('types').CSRRoute[]} All routes of the app. Only available when kit.router.resolution=client */\nlet routes;\n/** @type {import('types').CSRPageNodeLoader} */\nlet default_layout_loader;\n/** @type {import('types').CSRPageNodeLoader} */\nlet default_error_loader;\n/** @type {HTMLElement} */\nlet container;\n/** @type {HTMLElement} */\nlet target;\n\n/** @type {import('./types.js').SvelteKitApp} */\nexport let app;\n\n/**\n * Data that was serialized during SSR. This is cleared when the user first navigates\n * @type {Record<string, any>}\n */\nexport let remote_responses = {};\n\n/** @type {Array<((url: URL) => boolean)>} */\nconst invalidated = [];\n\n/**\n * An array of the `+layout.svelte` and `+page.svelte` component instances\n * that currently live on the page — used for capturing and restoring snapshots.\n * It's updated/manipulated through `bind:this` in `Root.svelte`.\n * @type {import('svelte').SvelteComponent[]}\n */\nconst components = [];\n\n/** @type {{id: string, token: {}, promise: Promise<import('./types.js').NavigationResult>} | null} */\nlet load_cache = null;\n\n/**\n * @type {Map<string, Promise<URL>>}\n * Cache for client-side rerouting, since it could contain async calls which we want to\n * avoid running multiple times which would slow down navigations (e.g. else preloading\n * wouldn't help because on navigation it would be called again). Since `reroute` should be\n * a pure function (i.e. always return the same) value it's safe to cache across navigations.\n * The server reroute calls don't need to be cached because they are called using `import(...)`\n * which is cached per the JS spec.\n */\nconst reroute_cache = new Map();\n\n/**\n * Note on before_navigate_callbacks, on_navigate_callbacks and after_navigate_callbacks:\n * do not re-assign as some closures keep references to these Sets\n */\n/** @type {Set<(navigation: import('@sveltejs/kit').BeforeNavigate) => void>} */\nconst before_navigate_callbacks = new Set();\n\n/** @type {Set<(navigation: import('@sveltejs/kit').OnNavigate) => import('types').MaybePromise<(() => void) | void>>} */\nconst on_navigate_callbacks = new Set();\n\n/** @type {Set<(navigation: import('@sveltejs/kit').AfterNavigate) => void>} */\nconst after_navigate_callbacks = new Set();\n\n/** @type {import('./types.js').NavigationState} */\nlet current = {\n\tbranch: [],\n\terror: null,\n\t// @ts-ignore - we need the initial value to be null\n\turl: null\n};\n\n/** this being true means we SSR'd */\nlet hydrated = false;\nlet started = false;\nlet autoscroll = true;\nlet updating = false;\nlet is_navigating = false;\nlet hash_navigating = false;\n/** True as soon as there happened one client-side navigation (excluding the SvelteKit-initialized initial one when in SPA mode) */\nlet has_navigated = false;\n\nlet force_invalidation = false;\n\n/** @type {import('svelte').SvelteComponent} */\nlet root;\n\n/** @type {number} keeping track of the history index in order to prevent popstate navigation events if needed */\nlet current_history_index;\n\n/** @type {number} */\nlet current_navigation_index;\n\n/** @type {{}} */\nlet token;\n\n/**\n * A set of tokens which are associated to current preloads.\n * If a preload becomes a real navigation, it's removed from the set.\n * If a preload token is in the set and the preload errors, the error\n * handling logic (for example reloading) is skipped.\n */\nconst preload_tokens = new Set();\n\n/** @type {Promise<void> | null} */\nexport let pending_invalidate;\n\n/**\n * @type {Map<string, {count: number, resource: any}>}\n * A map of id -> query info with all queries that currently exist in the app.\n */\nexport const query_map = new Map();\n\n/**\n * @param {import('./types.js').SvelteKitApp} _app\n * @param {HTMLElement} _target\n * @param {Parameters<typeof _hydrate>[1]} [hydrate]\n */\nexport async function start(_app, _target, hydrate) {\n\tif (DEV && _target === document.body) {\n\t\tconsole.warn(\n\t\t\t'Placing %sveltekit.body% directly inside <body> is not recommended, as your app may break for users who have certain browser extensions installed.\\n\\nConsider wrapping it in an element:\\n\\n<div style=\"display: contents\">\\n  %sveltekit.body%\\n</div>'\n\t\t);\n\t}\n\n\tif (__SVELTEKIT_PAYLOAD__?.data) {\n\t\tremote_responses = __SVELTEKIT_PAYLOAD__.data;\n\t}\n\n\t// detect basic auth credentials in the current URL\n\t// https://github.com/sveltejs/kit/pull/11179\n\t// if so, refresh the page without credentials\n\tif (document.URL !== location.href) {\n\t\t// eslint-disable-next-line no-self-assign\n\t\tlocation.href = location.href;\n\t}\n\n\tapp = _app;\n\n\tawait _app.hooks.init?.();\n\n\troutes = __SVELTEKIT_CLIENT_ROUTING__ ? parse(_app) : [];\n\tcontainer = __SVELTEKIT_EMBEDDED__ ? _target : document.documentElement;\n\ttarget = _target;\n\n\t// we import the root layout/error nodes eagerly, so that\n\t// connectivity errors after initialisation don't nuke the app\n\tdefault_layout_loader = _app.nodes[0];\n\tdefault_error_loader = _app.nodes[1];\n\tvoid default_layout_loader();\n\tvoid default_error_loader();\n\n\tcurrent_history_index = history.state?.[HISTORY_INDEX];\n\tcurrent_navigation_index = history.state?.[NAVIGATION_INDEX];\n\n\tif (!current_history_index) {\n\t\t// we use Date.now() as an offset so that cross-document navigations\n\t\t// within the app don't result in data loss\n\t\tcurrent_history_index = current_navigation_index = Date.now();\n\n\t\t// create initial history entry, so we can return here\n\t\thistory.replaceState(\n\t\t\t{\n\t\t\t\t...history.state,\n\t\t\t\t[HISTORY_INDEX]: current_history_index,\n\t\t\t\t[NAVIGATION_INDEX]: current_navigation_index\n\t\t\t},\n\t\t\t''\n\t\t);\n\t}\n\n\t// if we reload the page, or Cmd-Shift-T back to it,\n\t// recover scroll position\n\tconst scroll = scroll_positions[current_history_index];\n\tfunction restore_scroll() {\n\t\tif (scroll) {\n\t\t\thistory.scrollRestoration = 'manual';\n\t\t\tscrollTo(scroll.x, scroll.y);\n\t\t}\n\t}\n\n\tif (hydrate) {\n\t\trestore_scroll();\n\n\t\tawait _hydrate(target, hydrate);\n\t} else {\n\t\tawait navigate({\n\t\t\ttype: 'enter',\n\t\t\turl: resolve_url(app.hash ? decode_hash(new URL(location.href)) : location.href),\n\t\t\treplace_state: true\n\t\t});\n\n\t\trestore_scroll();\n\t}\n\n\t_start_router();\n}\n\nasync function _invalidate(include_load_functions = true, reset_page_state = true) {\n\t// Accept all invalidations as they come, don't swallow any while another invalidation\n\t// is running because subsequent invalidations may make earlier ones outdated,\n\t// but batch multiple synchronous invalidations.\n\tawait (pending_invalidate ||= Promise.resolve());\n\tif (!pending_invalidate) return;\n\tpending_invalidate = null;\n\n\tconst nav_token = (token = {});\n\tconst intent = await get_navigation_intent(current.url, true);\n\n\t// Clear preload, it might be affected by the invalidation.\n\t// Also solves an edge case where a preload is triggered, the navigation for it\n\t// was then triggered and is still running while the invalidation kicks in,\n\t// at which point the invalidation should take over and \"win\".\n\tload_cache = null;\n\n\t// Rerun queries\n\tif (force_invalidation) {\n\t\tquery_map.forEach(({ resource }) => {\n\t\t\tresource.refresh?.();\n\t\t});\n\t}\n\n\tif (include_load_functions) {\n\t\tconst prev_state = page.state;\n\t\tconst navigation_result = intent && (await load_route(intent));\n\t\tif (!navigation_result || nav_token !== token) return;\n\n\t\tif (navigation_result.type === 'redirect') {\n\t\t\treturn _goto(\n\t\t\t\tnew URL(navigation_result.location, current.url).href,\n\t\t\t\t{ replaceState: true },\n\t\t\t\t1,\n\t\t\t\tnav_token\n\t\t\t);\n\t\t}\n\n\t\t// This is a bit hacky but allows us not having to pass that boolean around, making things harder to reason about\n\t\tif (!reset_page_state) {\n\t\t\tnavigation_result.props.page.state = prev_state;\n\t\t}\n\t\tupdate(navigation_result.props.page);\n\t\tcurrent = navigation_result.state;\n\t\treset_invalidation();\n\t\troot.$set(navigation_result.props);\n\t} else {\n\t\treset_invalidation();\n\t}\n\n\t// Don't use allSettled yet because it's too new\n\tawait Promise.all([...query_map.values()].map(({ resource }) => resource)).catch(noop);\n}\n\nfunction reset_invalidation() {\n\tinvalidated.length = 0;\n\tforce_invalidation = false;\n}\n\n/** @param {number} index */\nfunction capture_snapshot(index) {\n\tif (components.some((c) => c?.snapshot)) {\n\t\tsnapshots[index] = components.map((c) => c?.snapshot?.capture());\n\t}\n}\n\n/** @param {number} index */\nfunction restore_snapshot(index) {\n\tsnapshots[index]?.forEach((value, i) => {\n\t\tcomponents[i]?.snapshot?.restore(value);\n\t});\n}\n\nfunction persist_state() {\n\tupdate_scroll_positions(current_history_index);\n\tstorage.set(SCROLL_KEY, scroll_positions);\n\n\tcapture_snapshot(current_navigation_index);\n\tstorage.set(SNAPSHOT_KEY, snapshots);\n}\n\n/**\n * @param {string | URL} url\n * @param {{ replaceState?: boolean; noScroll?: boolean; keepFocus?: boolean; invalidateAll?: boolean; invalidate?: Array<string | URL | ((url: URL) => boolean)>; state?: Record<string, any> }} options\n * @param {number} redirect_count\n * @param {{}} [nav_token]\n */\nexport async function _goto(url, options, redirect_count, nav_token) {\n\t/** @type {string[]} */\n\tlet query_keys;\n\n\t// Clear preload cache when invalidateAll is true to ensure fresh data\n\t// after form submissions or explicit invalidations\n\tif (options.invalidateAll) {\n\t\tload_cache = null;\n\t}\n\n\tawait navigate({\n\t\ttype: 'goto',\n\t\turl: resolve_url(url),\n\t\tkeepfocus: options.keepFocus,\n\t\tnoscroll: options.noScroll,\n\t\treplace_state: options.replaceState,\n\t\tstate: options.state,\n\t\tredirect_count,\n\t\tnav_token,\n\t\taccept: () => {\n\t\t\tif (options.invalidateAll) {\n\t\t\t\tforce_invalidation = true;\n\t\t\t\tquery_keys = [...query_map.keys()];\n\t\t\t}\n\n\t\t\tif (options.invalidate) {\n\t\t\t\toptions.invalidate.forEach(push_invalidated);\n\t\t\t}\n\t\t}\n\t});\n\n\tif (options.invalidateAll) {\n\t\t// TODO the ticks shouldn't be necessary, something inside Svelte itself is buggy\n\t\t// when a query in a layout that still exists after page change is refreshed earlier than this\n\t\tvoid svelte\n\t\t\t.tick()\n\t\t\t.then(svelte.tick)\n\t\t\t.then(() => {\n\t\t\t\tquery_map.forEach(({ resource }, key) => {\n\t\t\t\t\t// Only refresh those that already existed on the old page\n\t\t\t\t\tif (query_keys?.includes(key)) {\n\t\t\t\t\t\tresource.refresh?.();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t}\n}\n\n/** @param {import('./types.js').NavigationIntent} intent */\nasync function _preload_data(intent) {\n\t// Reuse the existing pending preload if it's for the same navigation.\n\t// Prevents an edge case where same preload is triggered multiple times,\n\t// then a later one is becoming the real navigation and the preload tokens\n\t// get out of sync.\n\tif (intent.id !== load_cache?.id) {\n\t\tconst preload = {};\n\t\tpreload_tokens.add(preload);\n\t\tload_cache = {\n\t\t\tid: intent.id,\n\t\t\ttoken: preload,\n\t\t\tpromise: load_route({ ...intent, preload }).then((result) => {\n\t\t\t\tpreload_tokens.delete(preload);\n\t\t\t\tif (result.type === 'loaded' && result.state.error) {\n\t\t\t\t\t// Don't cache errors, because they might be transient\n\t\t\t\t\tload_cache = null;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t})\n\t\t};\n\t}\n\n\treturn load_cache.promise;\n}\n\n/**\n * @param {URL} url\n * @returns {Promise<void>}\n */\nasync function _preload_code(url) {\n\tconst route = (await get_navigation_intent(url, false))?.route;\n\n\tif (route) {\n\t\tawait Promise.all([...route.layouts, route.leaf].map((load) => load?.[1]()));\n\t}\n}\n\n/**\n * @param {import('./types.js').NavigationFinished} result\n * @param {HTMLElement} target\n * @param {boolean} hydrate\n */\nfunction initialize(result, target, hydrate) {\n\tif (DEV && result.state.error && document.querySelector('vite-error-overlay')) return;\n\n\tcurrent = result.state;\n\n\tconst style = document.querySelector('style[data-sveltekit]');\n\tif (style) style.remove();\n\n\tObject.assign(page, /** @type {import('@sveltejs/kit').Page} */ (result.props.page));\n\n\troot = new app.root({\n\t\ttarget,\n\t\tprops: { ...result.props, stores, components },\n\t\thydrate,\n\t\t// @ts-ignore Svelte 5 specific: asynchronously instantiate the component, i.e. don't call flushSync\n\t\tsync: false\n\t});\n\n\trestore_snapshot(current_navigation_index);\n\n\tif (hydrate) {\n\t\t/** @type {import('@sveltejs/kit').AfterNavigate} */\n\t\tconst navigation = {\n\t\t\tfrom: null,\n\t\t\tto: {\n\t\t\t\tparams: current.params,\n\t\t\t\troute: { id: current.route?.id ?? null },\n\t\t\t\turl: new URL(location.href)\n\t\t\t},\n\t\t\twillUnload: false,\n\t\t\ttype: 'enter',\n\t\t\tcomplete: Promise.resolve()\n\t\t};\n\n\t\tafter_navigate_callbacks.forEach((fn) => fn(navigation));\n\t}\n\n\tstarted = true;\n}\n\n/**\n *\n * @param {{\n *   url: URL;\n *   params: Record<string, string>;\n *   branch: Array<import('./types.js').BranchNode | undefined>;\n *   status: number;\n *   error: App.Error | null;\n *   route: import('types').CSRRoute | null;\n *   form?: Record<string, any> | null;\n * }} opts\n */\nfunction get_navigation_result_from_branch({ url, params, branch, status, error, route, form }) {\n\t/** @type {import('types').TrailingSlash} */\n\tlet slash = 'never';\n\n\t// if `paths.base === '/a/b/c`, then the root route is always `/a/b/c/`, regardless of\n\t// the `trailingSlash` route option, so that relative paths to JS and CSS work\n\tif (base && (url.pathname === base || url.pathname === base + '/')) {\n\t\tslash = 'always';\n\t} else {\n\t\tfor (const node of branch) {\n\t\t\tif (node?.slash !== undefined) slash = node.slash;\n\t\t}\n\t}\n\n\turl.pathname = normalize_path(url.pathname, slash);\n\t// eslint-disable-next-line no-self-assign\n\turl.search = url.search; // turn `/?` into `/`\n\n\t/** @type {import('./types.js').NavigationFinished} */\n\tconst result = {\n\t\ttype: 'loaded',\n\t\tstate: {\n\t\t\turl,\n\t\t\tparams,\n\t\t\tbranch,\n\t\t\terror,\n\t\t\troute\n\t\t},\n\t\tprops: {\n\t\t\t// @ts-ignore Somehow it's getting SvelteComponent and SvelteComponentDev mixed up\n\t\t\tconstructors: compact(branch).map((branch_node) => branch_node.node.component),\n\t\t\tpage: clone_page(page)\n\t\t}\n\t};\n\n\tif (form !== undefined) {\n\t\tresult.props.form = form;\n\t}\n\n\tlet data = {};\n\tlet data_changed = !page;\n\n\tlet p = 0;\n\n\tfor (let i = 0; i < Math.max(branch.length, current.branch.length); i += 1) {\n\t\tconst node = branch[i];\n\t\tconst prev = current.branch[i];\n\n\t\tif (node?.data !== prev?.data) data_changed = true;\n\t\tif (!node) continue;\n\n\t\tdata = { ...data, ...node.data };\n\n\t\t// Only set props if the node actually updated. This prevents needless rerenders.\n\t\tif (data_changed) {\n\t\t\tresult.props[`data_${p}`] = data;\n\t\t}\n\n\t\tp += 1;\n\t}\n\n\tconst page_changed =\n\t\t!current.url ||\n\t\turl.href !== current.url.href ||\n\t\tcurrent.error !== error ||\n\t\t(form !== undefined && form !== page.form) ||\n\t\tdata_changed;\n\n\tif (page_changed) {\n\t\tresult.props.page = {\n\t\t\terror,\n\t\t\tparams,\n\t\t\troute: {\n\t\t\t\tid: route?.id ?? null\n\t\t\t},\n\t\t\tstate: {},\n\t\t\tstatus,\n\t\t\turl: new URL(url),\n\t\t\tform: form ?? null,\n\t\t\t// The whole page store is updated, but this way the object reference stays the same\n\t\t\tdata: data_changed ? data : page.data\n\t\t};\n\t}\n\n\treturn result;\n}\n\n/**\n * Call the universal load function of the given node, if it exists.\n *\n * @param {{\n *   loader: import('types').CSRPageNodeLoader;\n * \t parent: () => Promise<Record<string, any>>;\n *   url: URL;\n *   params: Record<string, string>;\n *   route: { id: string | null };\n * \t server_data_node: import('./types.js').DataNode | null;\n * }} options\n * @returns {Promise<import('./types.js').BranchNode>}\n */\nasync function load_node({ loader, parent, url, params, route, server_data_node }) {\n\t/** @type {Record<string, any> | null} */\n\tlet data = null;\n\n\tlet is_tracking = true;\n\n\t/** @type {import('types').Uses} */\n\tconst uses = {\n\t\tdependencies: new Set(),\n\t\tparams: new Set(),\n\t\tparent: false,\n\t\troute: false,\n\t\turl: false,\n\t\tsearch_params: new Set()\n\t};\n\n\tconst node = await loader();\n\n\tif (DEV) {\n\t\tvalidate_page_exports(node.universal);\n\n\t\tif (node.universal && app.hash) {\n\t\t\tconst options = Object.keys(node.universal).filter((o) => o !== 'load');\n\n\t\t\tif (options.length > 0) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Page options are ignored when \\`router.type === 'hash'\\` (${route.id} has ${options\n\t\t\t\t\t\t.filter((o) => o !== 'load')\n\t\t\t\t\t\t.map((o) => `'${o}'`)\n\t\t\t\t\t\t.join(', ')})`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (__SVELTEKIT_HAS_UNIVERSAL_LOAD__ && node.universal?.load) {\n\t\t/** @param {string[]} deps */\n\t\tfunction depends(...deps) {\n\t\t\tfor (const dep of deps) {\n\t\t\t\tif (DEV) validate_depends(/** @type {string} */ (route.id), dep);\n\n\t\t\t\tconst { href } = new URL(dep, url);\n\t\t\t\tuses.dependencies.add(href);\n\t\t\t}\n\t\t}\n\n\t\t/** @type {import('@sveltejs/kit').LoadEvent} */\n\t\tconst load_input = {\n\t\t\ttracing: { enabled: false, root: noop_span, current: noop_span },\n\t\t\troute: new Proxy(route, {\n\t\t\t\tget: (target, key) => {\n\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\tuses.route = true;\n\t\t\t\t\t}\n\t\t\t\t\treturn target[/** @type {'id'} */ (key)];\n\t\t\t\t}\n\t\t\t}),\n\t\t\tparams: new Proxy(params, {\n\t\t\t\tget: (target, key) => {\n\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\tuses.params.add(/** @type {string} */ (key));\n\t\t\t\t\t}\n\t\t\t\t\treturn target[/** @type {string} */ (key)];\n\t\t\t\t}\n\t\t\t}),\n\t\t\tdata: server_data_node?.data ?? null,\n\t\t\turl: make_trackable(\n\t\t\t\turl,\n\t\t\t\t() => {\n\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\tuses.url = true;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t(param) => {\n\t\t\t\t\tif (is_tracking) {\n\t\t\t\t\t\tuses.search_params.add(param);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tapp.hash\n\t\t\t),\n\t\t\tasync fetch(resource, init) {\n\t\t\t\tif (resource instanceof Request) {\n\t\t\t\t\t// we're not allowed to modify the received `Request` object, so in order\n\t\t\t\t\t// to fixup relative urls we create a new equivalent `init` object instead\n\t\t\t\t\tinit = {\n\t\t\t\t\t\t// the request body must be consumed in memory until browsers\n\t\t\t\t\t\t// implement streaming request bodies and/or the body getter\n\t\t\t\t\t\tbody:\n\t\t\t\t\t\t\tresource.method === 'GET' || resource.method === 'HEAD'\n\t\t\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t\t\t: await resource.blob(),\n\t\t\t\t\t\tcache: resource.cache,\n\t\t\t\t\t\tcredentials: resource.credentials,\n\t\t\t\t\t\t// the server sets headers to `undefined` if there are no headers but\n\t\t\t\t\t\t// the client defaults to an empty Headers object in the Request object.\n\t\t\t\t\t\t// To keep the two values in sync, we explicitly set the headers to `undefined`.\n\t\t\t\t\t\t// Also, not sure why, but sometimes 0 is evaluated as truthy so we need to\n\t\t\t\t\t\t// explicitly compare the headers length to a number here\n\t\t\t\t\t\theaders: [...resource.headers].length > 0 ? resource?.headers : undefined,\n\t\t\t\t\t\tintegrity: resource.integrity,\n\t\t\t\t\t\tkeepalive: resource.keepalive,\n\t\t\t\t\t\tmethod: resource.method,\n\t\t\t\t\t\tmode: resource.mode,\n\t\t\t\t\t\tredirect: resource.redirect,\n\t\t\t\t\t\treferrer: resource.referrer,\n\t\t\t\t\t\treferrerPolicy: resource.referrerPolicy,\n\t\t\t\t\t\tsignal: resource.signal,\n\t\t\t\t\t\t...init\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tconst { resolved, promise } = resolve_fetch_url(resource, init, url);\n\n\t\t\t\tif (is_tracking) {\n\t\t\t\t\tdepends(resolved.href);\n\t\t\t\t}\n\n\t\t\t\treturn promise;\n\t\t\t},\n\t\t\tsetHeaders: () => {}, // noop\n\t\t\tdepends,\n\t\t\tparent() {\n\t\t\t\tif (is_tracking) {\n\t\t\t\t\tuses.parent = true;\n\t\t\t\t}\n\t\t\t\treturn parent();\n\t\t\t},\n\t\t\tuntrack(fn) {\n\t\t\t\tis_tracking = false;\n\t\t\t\ttry {\n\t\t\t\t\treturn fn();\n\t\t\t\t} finally {\n\t\t\t\t\tis_tracking = true;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tif (DEV) {\n\t\t\ttry {\n\t\t\t\tlock_fetch();\n\t\t\t\tdata = (await node.universal.load.call(null, load_input)) ?? null;\n\t\t\t\tvalidate_load_response(data, `related to route '${route.id}'`);\n\t\t\t} finally {\n\t\t\t\tunlock_fetch();\n\t\t\t}\n\t\t} else {\n\t\t\tdata = (await node.universal.load.call(null, load_input)) ?? null;\n\t\t}\n\t}\n\n\treturn {\n\t\tnode,\n\t\tloader,\n\t\tserver: server_data_node,\n\t\tuniversal: node.universal?.load ? { type: 'data', data, uses } : null,\n\t\tdata: data ?? server_data_node?.data ?? null,\n\t\tslash: node.universal?.trailingSlash ?? server_data_node?.slash\n\t};\n}\n\n/**\n * @param {Request | string | URL} input\n * @param {RequestInit | undefined} init\n * @param {URL} url\n */\nfunction resolve_fetch_url(input, init, url) {\n\tlet requested = input instanceof Request ? input.url : input;\n\n\t// we must fixup relative urls so they are resolved from the target page\n\tconst resolved = new URL(requested, url);\n\n\t// match ssr serialized data url, which is important to find cached responses\n\tif (resolved.origin === url.origin) {\n\t\trequested = resolved.href.slice(url.origin.length);\n\t}\n\n\t// prerendered pages may be served from any origin, so `initial_fetch` urls shouldn't be resolved\n\tconst promise = started\n\t\t? subsequent_fetch(requested, resolved.href, init)\n\t\t: initial_fetch(requested, init);\n\n\treturn { resolved, promise };\n}\n\n/**\n * @param {boolean} parent_changed\n * @param {boolean} route_changed\n * @param {boolean} url_changed\n * @param {Set<string>} search_params_changed\n * @param {import('types').Uses | undefined} uses\n * @param {Record<string, string>} params\n */\nfunction has_changed(\n\tparent_changed,\n\troute_changed,\n\turl_changed,\n\tsearch_params_changed,\n\tuses,\n\tparams\n) {\n\tif (force_invalidation) return true;\n\n\tif (!uses) return false;\n\n\tif (uses.parent && parent_changed) return true;\n\tif (uses.route && route_changed) return true;\n\tif (uses.url && url_changed) return true;\n\n\tfor (const tracked_params of uses.search_params) {\n\t\tif (search_params_changed.has(tracked_params)) return true;\n\t}\n\n\tfor (const param of uses.params) {\n\t\tif (params[param] !== current.params[param]) return true;\n\t}\n\n\tfor (const href of uses.dependencies) {\n\t\tif (invalidated.some((fn) => fn(new URL(href)))) return true;\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {import('types').ServerDataNode | import('types').ServerDataSkippedNode | null} node\n * @param {import('./types.js').DataNode | null} [previous]\n * @returns {import('./types.js').DataNode | null}\n */\nfunction create_data_node(node, previous) {\n\tif (node?.type === 'data') return node;\n\tif (node?.type === 'skip') return previous ?? null;\n\treturn null;\n}\n\n/**\n * @param {URL | null} old_url\n * @param {URL} new_url\n */\nfunction diff_search_params(old_url, new_url) {\n\tif (!old_url) return new Set(new_url.searchParams.keys());\n\n\tconst changed = new Set([...old_url.searchParams.keys(), ...new_url.searchParams.keys()]);\n\n\tfor (const key of changed) {\n\t\tconst old_values = old_url.searchParams.getAll(key);\n\t\tconst new_values = new_url.searchParams.getAll(key);\n\n\t\tif (\n\t\t\told_values.every((value) => new_values.includes(value)) &&\n\t\t\tnew_values.every((value) => old_values.includes(value))\n\t\t) {\n\t\t\tchanged.delete(key);\n\t\t}\n\t}\n\n\treturn changed;\n}\n\n/**\n * @param {Omit<import('./types.js').NavigationFinished['state'], 'branch'> & { error: App.Error }} opts\n * @returns {import('./types.js').NavigationFinished}\n */\nfunction preload_error({ error, url, route, params }) {\n\treturn {\n\t\ttype: 'loaded',\n\t\tstate: {\n\t\t\terror,\n\t\t\turl,\n\t\t\troute,\n\t\t\tparams,\n\t\t\tbranch: []\n\t\t},\n\t\tprops: {\n\t\t\tpage: clone_page(page),\n\t\t\tconstructors: []\n\t\t}\n\t};\n}\n\n/**\n * @param {import('./types.js').NavigationIntent & { preload?: {} }} intent\n * @returns {Promise<import('./types.js').NavigationResult>}\n */\nasync function load_route({ id, invalidating, url, params, route, preload }) {\n\tif (load_cache?.id === id) {\n\t\t// the preload becomes the real navigation\n\t\tpreload_tokens.delete(load_cache.token);\n\t\treturn load_cache.promise;\n\t}\n\n\tconst { errors, layouts, leaf } = route;\n\n\tconst loaders = [...layouts, leaf];\n\n\t// preload modules to avoid waterfall, but handle rejections\n\t// so they don't get reported to Sentry et al (we don't need\n\t// to act on the failures at this point)\n\terrors.forEach((loader) => loader?.().catch(() => {}));\n\tloaders.forEach((loader) => loader?.[1]().catch(() => {}));\n\n\t/** @type {import('types').ServerNodesResponse | import('types').ServerRedirectNode | null} */\n\tlet server_data = null;\n\tconst url_changed = current.url ? id !== get_page_key(current.url) : false;\n\tconst route_changed = current.route ? route.id !== current.route.id : false;\n\tconst search_params_changed = diff_search_params(current.url, url);\n\n\tlet parent_invalid = false;\n\n\tif (__SVELTEKIT_HAS_SERVER_LOAD__) {\n\t\tconst invalid_server_nodes = loaders.map((loader, i) => {\n\t\t\tconst previous = current.branch[i];\n\n\t\t\tconst invalid =\n\t\t\t\t!!loader?.[0] &&\n\t\t\t\t(previous?.loader !== loader[1] ||\n\t\t\t\t\thas_changed(\n\t\t\t\t\t\tparent_invalid,\n\t\t\t\t\t\troute_changed,\n\t\t\t\t\t\turl_changed,\n\t\t\t\t\t\tsearch_params_changed,\n\t\t\t\t\t\tprevious.server?.uses,\n\t\t\t\t\t\tparams\n\t\t\t\t\t));\n\n\t\t\tif (invalid) {\n\t\t\t\t// For the next one\n\t\t\t\tparent_invalid = true;\n\t\t\t}\n\n\t\t\treturn invalid;\n\t\t});\n\n\t\tif (invalid_server_nodes.some(Boolean)) {\n\t\t\ttry {\n\t\t\t\tserver_data = await load_data(url, invalid_server_nodes);\n\t\t\t} catch (error) {\n\t\t\t\tconst handled_error = await handle_error(error, { url, params, route: { id } });\n\n\t\t\t\tif (preload_tokens.has(preload)) {\n\t\t\t\t\treturn preload_error({ error: handled_error, url, params, route });\n\t\t\t\t}\n\n\t\t\t\treturn load_root_error_page({\n\t\t\t\t\tstatus: get_status(error),\n\t\t\t\t\terror: handled_error,\n\t\t\t\t\turl,\n\t\t\t\t\troute\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (server_data.type === 'redirect') {\n\t\t\t\treturn server_data;\n\t\t\t}\n\t\t}\n\t}\n\n\tconst server_data_nodes = server_data?.nodes;\n\n\tlet parent_changed = false;\n\n\tconst branch_promises = loaders.map(async (loader, i) => {\n\t\tif (!loader) return;\n\n\t\t/** @type {import('./types.js').BranchNode | undefined} */\n\t\tconst previous = current.branch[i];\n\n\t\tconst server_data_node = server_data_nodes?.[i];\n\n\t\t// re-use data from previous load if it's still valid\n\t\tconst valid =\n\t\t\t(!server_data_node || server_data_node.type === 'skip') &&\n\t\t\tloader[1] === previous?.loader &&\n\t\t\t!has_changed(\n\t\t\t\tparent_changed,\n\t\t\t\troute_changed,\n\t\t\t\turl_changed,\n\t\t\t\tsearch_params_changed,\n\t\t\t\tprevious.universal?.uses,\n\t\t\t\tparams\n\t\t\t);\n\t\tif (valid) return previous;\n\n\t\tparent_changed = true;\n\n\t\tif (server_data_node?.type === 'error') {\n\t\t\t// rethrow and catch below\n\t\t\tthrow server_data_node;\n\t\t}\n\n\t\treturn load_node({\n\t\t\tloader: loader[1],\n\t\t\turl,\n\t\t\tparams,\n\t\t\troute,\n\t\t\tparent: async () => {\n\t\t\t\tconst data = {};\n\t\t\t\tfor (let j = 0; j < i; j += 1) {\n\t\t\t\t\tObject.assign(data, (await branch_promises[j])?.data);\n\t\t\t\t}\n\t\t\t\treturn data;\n\t\t\t},\n\t\t\tserver_data_node: create_data_node(\n\t\t\t\t// server_data_node is undefined if it wasn't reloaded from the server;\n\t\t\t\t// and if current loader uses server data, we want to reuse previous data.\n\t\t\t\tserver_data_node === undefined && loader[0] ? { type: 'skip' } : (server_data_node ?? null),\n\t\t\t\tloader[0] ? previous?.server : undefined\n\t\t\t)\n\t\t});\n\t});\n\n\t// if we don't do this, rejections will be unhandled\n\tfor (const p of branch_promises) p.catch(() => {});\n\n\t/** @type {Array<import('./types.js').BranchNode | undefined>} */\n\tconst branch = [];\n\n\tfor (let i = 0; i < loaders.length; i += 1) {\n\t\tif (loaders[i]) {\n\t\t\ttry {\n\t\t\t\tbranch.push(await branch_promises[i]);\n\t\t\t} catch (err) {\n\t\t\t\tif (err instanceof Redirect) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: 'redirect',\n\t\t\t\t\t\tlocation: err.location\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (preload_tokens.has(preload)) {\n\t\t\t\t\treturn preload_error({\n\t\t\t\t\t\terror: await handle_error(err, { params, url, route: { id: route.id } }),\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tparams,\n\t\t\t\t\t\troute\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tlet status = get_status(err);\n\t\t\t\t/** @type {App.Error} */\n\t\t\t\tlet error;\n\n\t\t\t\tif (server_data_nodes?.includes(/** @type {import('types').ServerErrorNode} */ (err))) {\n\t\t\t\t\t// this is the server error rethrown above, reconstruct but don't invoke\n\t\t\t\t\t// the client error handler; it should've already been handled on the server\n\t\t\t\t\tstatus = /** @type {import('types').ServerErrorNode} */ (err).status ?? status;\n\t\t\t\t\terror = /** @type {import('types').ServerErrorNode} */ (err).error;\n\t\t\t\t} else if (err instanceof HttpError) {\n\t\t\t\t\terror = err.body;\n\t\t\t\t} else {\n\t\t\t\t\t// Referenced node could have been removed due to redeploy, check\n\t\t\t\t\tconst updated = await stores.updated.check();\n\t\t\t\t\tif (updated) {\n\t\t\t\t\t\t// Before reloading, try to update the service worker if it exists\n\t\t\t\t\t\tawait update_service_worker();\n\t\t\t\t\t\treturn await native_navigation(url);\n\t\t\t\t\t}\n\n\t\t\t\t\terror = await handle_error(err, { params, url, route: { id: route.id } });\n\t\t\t\t}\n\n\t\t\t\tconst error_load = await load_nearest_error_page(i, branch, errors);\n\t\t\t\tif (error_load) {\n\t\t\t\t\treturn get_navigation_result_from_branch({\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tparams,\n\t\t\t\t\t\tbranch: branch.slice(0, error_load.idx).concat(error_load.node),\n\t\t\t\t\t\tstatus,\n\t\t\t\t\t\terror,\n\t\t\t\t\t\troute\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturn await server_fallback(url, { id: route.id }, error, status);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// push an empty slot so we can rewind past gaps to the\n\t\t\t// layout that corresponds with an +error.svelte page\n\t\t\tbranch.push(undefined);\n\t\t}\n\t}\n\n\treturn get_navigation_result_from_branch({\n\t\turl,\n\t\tparams,\n\t\tbranch,\n\t\tstatus: 200,\n\t\terror: null,\n\t\troute,\n\t\t// Reset `form` on navigation, but not invalidation\n\t\tform: invalidating ? undefined : null\n\t});\n}\n\n/**\n * @param {number} i Start index to backtrack from\n * @param {Array<import('./types.js').BranchNode | undefined>} branch Branch to backtrack\n * @param {Array<import('types').CSRPageNodeLoader | undefined>} errors All error pages for this branch\n * @returns {Promise<{idx: number; node: import('./types.js').BranchNode} | undefined>}\n */\nasync function load_nearest_error_page(i, branch, errors) {\n\twhile (i--) {\n\t\tif (errors[i]) {\n\t\t\tlet j = i;\n\t\t\twhile (!branch[j]) j -= 1;\n\t\t\ttry {\n\t\t\t\treturn {\n\t\t\t\t\tidx: j + 1,\n\t\t\t\t\tnode: {\n\t\t\t\t\t\tnode: await /** @type {import('types').CSRPageNodeLoader } */ (errors[i])(),\n\t\t\t\t\t\tloader: /** @type {import('types').CSRPageNodeLoader } */ (errors[i]),\n\t\t\t\t\t\tdata: {},\n\t\t\t\t\t\tserver: null,\n\t\t\t\t\t\tuniversal: null\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t} catch {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @param {{\n *   status: number;\n *   error: App.Error;\n *   url: URL;\n *   route: { id: string | null }\n * }} opts\n * @returns {Promise<import('./types.js').NavigationFinished>}\n */\nasync function load_root_error_page({ status, error, url, route }) {\n\t/** @type {Record<string, string>} */\n\tconst params = {}; // error page does not have params\n\n\t/** @type {import('types').ServerDataNode | null} */\n\tlet server_data_node = null;\n\n\tif (__SVELTEKIT_HAS_SERVER_LOAD__) {\n\t\tconst default_layout_has_server_load = app.server_loads[0] === 0;\n\n\t\tif (default_layout_has_server_load) {\n\t\t\t// TODO post-https://github.com/sveltejs/kit/discussions/6124 we can use\n\t\t\t// existing root layout data\n\t\t\ttry {\n\t\t\t\tconst server_data = await load_data(url, [true]);\n\n\t\t\t\tif (\n\t\t\t\t\tserver_data.type !== 'data' ||\n\t\t\t\t\t(server_data.nodes[0] && server_data.nodes[0].type !== 'data')\n\t\t\t\t) {\n\t\t\t\t\tthrow 0;\n\t\t\t\t}\n\n\t\t\t\tserver_data_node = server_data.nodes[0] ?? null;\n\t\t\t} catch {\n\t\t\t\t// at this point we have no choice but to fall back to the server, if it wouldn't\n\t\t\t\t// bring us right back here, turning this into an endless loop\n\t\t\t\tif (url.origin !== origin || url.pathname !== location.pathname || hydrated) {\n\t\t\t\t\tawait native_navigation(url);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\ttry {\n\t\tconst root_layout = await load_node({\n\t\t\tloader: default_layout_loader,\n\t\t\turl,\n\t\t\tparams,\n\t\t\troute,\n\t\t\tparent: () => Promise.resolve({}),\n\t\t\tserver_data_node: create_data_node(server_data_node)\n\t\t});\n\n\t\t/** @type {import('./types.js').BranchNode} */\n\t\tconst root_error = {\n\t\t\tnode: await default_error_loader(),\n\t\t\tloader: default_error_loader,\n\t\t\tuniversal: null,\n\t\t\tserver: null,\n\t\t\tdata: null\n\t\t};\n\n\t\treturn get_navigation_result_from_branch({\n\t\t\turl,\n\t\t\tparams,\n\t\t\tbranch: [root_layout, root_error],\n\t\t\tstatus,\n\t\t\terror,\n\t\t\troute: null\n\t\t});\n\t} catch (error) {\n\t\tif (error instanceof Redirect) {\n\t\t\t// @ts-expect-error TODO investigate this\n\t\t\treturn _goto(new URL(error.location, location.href), {}, 0);\n\t\t}\n\n\t\t// TODO: this falls back to the server when a server exists, but what about SPA mode?\n\t\tthrow error;\n\t}\n}\n\n/**\n * Resolve the relative rerouted URL for a client-side navigation\n * @param {URL} url\n * @returns {Promise<URL | undefined>}\n */\nasync function get_rerouted_url(url) {\n\tconst href = url.href;\n\n\tif (reroute_cache.has(href)) {\n\t\treturn reroute_cache.get(href);\n\t}\n\n\tlet rerouted;\n\n\ttry {\n\t\tconst promise = (async () => {\n\t\t\t// reroute could alter the given URL, so we pass a copy\n\t\t\tlet rerouted =\n\t\t\t\t(await app.hooks.reroute({\n\t\t\t\t\turl: new URL(url),\n\t\t\t\t\tfetch: async (input, init) => {\n\t\t\t\t\t\treturn resolve_fetch_url(input, init, url).promise;\n\t\t\t\t\t}\n\t\t\t\t})) ?? url;\n\n\t\t\tif (typeof rerouted === 'string') {\n\t\t\t\tconst tmp = new URL(url); // do not mutate the incoming URL\n\n\t\t\t\tif (app.hash) {\n\t\t\t\t\ttmp.hash = rerouted;\n\t\t\t\t} else {\n\t\t\t\t\ttmp.pathname = rerouted;\n\t\t\t\t}\n\n\t\t\t\trerouted = tmp;\n\t\t\t}\n\n\t\t\treturn rerouted;\n\t\t})();\n\n\t\treroute_cache.set(href, promise);\n\t\trerouted = await promise;\n\t} catch (e) {\n\t\treroute_cache.delete(href);\n\t\tif (DEV) {\n\t\t\t// in development, print the error...\n\t\t\tconsole.error(e);\n\n\t\t\t// ...and pause execution, since otherwise we will immediately reload the page\n\t\t\tdebugger; // eslint-disable-line\n\t\t}\n\n\t\t// fall back to native navigation\n\t\treturn;\n\t}\n\n\treturn rerouted;\n}\n\n/**\n * Resolve the full info (which route, params, etc.) for a client-side navigation from the URL,\n * taking the reroute hook into account. If this isn't a client-side-navigation (or the URL is undefined),\n * returns undefined.\n * @param {URL | undefined} url\n * @param {boolean} invalidating\n * @returns {Promise<import('./types.js').NavigationIntent | undefined>}\n */\nasync function get_navigation_intent(url, invalidating) {\n\tif (!url) return;\n\tif (is_external_url(url, base, app.hash)) return;\n\n\tif (__SVELTEKIT_CLIENT_ROUTING__) {\n\t\tconst rerouted = await get_rerouted_url(url);\n\t\tif (!rerouted) return;\n\n\t\tconst path = get_url_path(rerouted);\n\n\t\tfor (const route of routes) {\n\t\t\tconst params = route.exec(path);\n\n\t\t\tif (params) {\n\t\t\t\treturn {\n\t\t\t\t\tid: get_page_key(url),\n\t\t\t\t\tinvalidating,\n\t\t\t\t\troute,\n\t\t\t\t\tparams: decode_params(params),\n\t\t\t\t\turl\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t} else {\n\t\t/** @type {{ route?: import('types').CSRRouteServer, params: Record<string, string>}} */\n\t\tconst { route, params } = await import(\n\t\t\t/* @vite-ignore */\n\t\t\tadd_resolution_suffix(url.pathname)\n\t\t);\n\n\t\tif (!route) return;\n\n\t\treturn {\n\t\t\tid: get_page_key(url),\n\t\t\tinvalidating,\n\t\t\troute: parse_server_route(route, app.nodes),\n\t\t\tparams,\n\t\t\turl\n\t\t};\n\t}\n}\n\n/** @param {URL} url */\nfunction get_url_path(url) {\n\treturn (\n\t\tdecode_pathname(\n\t\t\tapp.hash ? url.hash.replace(/^#/, '').replace(/[?#].+/, '') : url.pathname.slice(base.length)\n\t\t) || '/'\n\t);\n}\n\n/** @param {URL} url */\nfunction get_page_key(url) {\n\treturn (app.hash ? url.hash.replace(/^#/, '') : url.pathname) + url.search;\n}\n\n/**\n * @param {{\n *   url: URL;\n *   type: import('@sveltejs/kit').Navigation[\"type\"];\n *   intent?: import('./types.js').NavigationIntent;\n *   delta?: number;\n *   event?: PopStateEvent | MouseEvent;\n * }} opts\n */\nfunction _before_navigate({ url, type, intent, delta, event }) {\n\tlet should_block = false;\n\n\tconst nav = create_navigation(current, intent, url, type);\n\n\tif (delta !== undefined) {\n\t\tnav.navigation.delta = delta;\n\t}\n\n\tif (event !== undefined) {\n\t\t// @ts-ignore\n\t\tnav.navigation.event = event;\n\t}\n\n\tconst cancellable = {\n\t\t...nav.navigation,\n\t\tcancel: () => {\n\t\t\tshould_block = true;\n\t\t\tnav.reject(new Error('navigation cancelled'));\n\t\t}\n\t};\n\n\tif (!is_navigating) {\n\t\t// Don't run the event during redirects\n\t\tbefore_navigate_callbacks.forEach((fn) => fn(cancellable));\n\t}\n\n\treturn should_block ? null : nav;\n}\n\n/**\n * @param {{\n *   type: import('@sveltejs/kit').NavigationType;\n *   url: URL;\n *   popped?: {\n *     state: Record<string, any>;\n *     scroll: { x: number, y: number };\n *     delta: number;\n *   };\n *   keepfocus?: boolean;\n *   noscroll?: boolean;\n *   replace_state?: boolean;\n *   state?: Record<string, any>;\n *   redirect_count?: number;\n *   nav_token?: {};\n *   accept?: () => void;\n *   block?: () => void;\n *   event?: Event\n * }} opts\n */\nasync function navigate({\n\ttype,\n\turl,\n\tpopped,\n\tkeepfocus,\n\tnoscroll,\n\treplace_state,\n\tstate = {},\n\tredirect_count = 0,\n\tnav_token = {},\n\taccept = noop,\n\tblock = noop,\n\tevent\n}) {\n\tremote_responses = {};\n\n\tconst prev_token = token;\n\ttoken = nav_token;\n\n\tconst intent = await get_navigation_intent(url, false);\n\tconst nav =\n\t\ttype === 'enter'\n\t\t\t? create_navigation(current, intent, url, type)\n\t\t\t: _before_navigate({\n\t\t\t\t\turl,\n\t\t\t\t\ttype,\n\t\t\t\t\tdelta: popped?.delta,\n\t\t\t\t\tintent,\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tevent\n\t\t\t\t});\n\n\tif (!nav) {\n\t\tblock();\n\t\tif (token === nav_token) token = prev_token;\n\t\treturn;\n\t}\n\n\t// store this before calling `accept()`, which may change the index\n\tconst previous_history_index = current_history_index;\n\tconst previous_navigation_index = current_navigation_index;\n\n\taccept();\n\n\tis_navigating = true;\n\n\tif (started && nav.navigation.type !== 'enter') {\n\t\tstores.navigating.set((navigating.current = nav.navigation));\n\t}\n\n\tlet navigation_result = intent && (await load_route(intent));\n\n\tif (!navigation_result) {\n\t\tif (is_external_url(url, base, app.hash)) {\n\t\t\tif (DEV && app.hash) {\n\t\t\t\t// Special case for hash mode during DEV: If someone accidentally forgets to use a hash for the link,\n\t\t\t\t// they would end up here in an endless loop. Fall back to error page in that case\n\t\t\t\tnavigation_result = await server_fallback(\n\t\t\t\t\turl,\n\t\t\t\t\t{ id: null },\n\t\t\t\t\tawait handle_error(\n\t\t\t\t\t\tnew SvelteKitError(\n\t\t\t\t\t\t\t404,\n\t\t\t\t\t\t\t'Not Found',\n\t\t\t\t\t\t\t`Not found: ${url.pathname} (did you forget the hash?)`\n\t\t\t\t\t\t),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\turl,\n\t\t\t\t\t\t\tparams: {},\n\t\t\t\t\t\t\troute: { id: null }\n\t\t\t\t\t\t}\n\t\t\t\t\t),\n\t\t\t\t\t404,\n\t\t\t\t\treplace_state\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn await native_navigation(url, replace_state);\n\t\t\t}\n\t\t} else {\n\t\t\tnavigation_result = await server_fallback(\n\t\t\t\turl,\n\t\t\t\t{ id: null },\n\t\t\t\tawait handle_error(new SvelteKitError(404, 'Not Found', `Not found: ${url.pathname}`), {\n\t\t\t\t\turl,\n\t\t\t\t\tparams: {},\n\t\t\t\t\troute: { id: null }\n\t\t\t\t}),\n\t\t\t\t404,\n\t\t\t\treplace_state\n\t\t\t);\n\t\t}\n\t}\n\n\t// if this is an internal navigation intent, use the normalized\n\t// URL for the rest of the function\n\turl = intent?.url || url;\n\n\t// abort if user navigated during update\n\tif (token !== nav_token) {\n\t\tnav.reject(new Error('navigation aborted'));\n\t\treturn false;\n\t}\n\n\tif (navigation_result.type === 'redirect') {\n\t\t// whatwg fetch spec https://fetch.spec.whatwg.org/#http-redirect-fetch says to error after 20 redirects\n\t\tif (redirect_count < 20) {\n\t\t\tawait navigate({\n\t\t\t\ttype,\n\t\t\t\turl: new URL(navigation_result.location, url),\n\t\t\t\tpopped,\n\t\t\t\tkeepfocus,\n\t\t\t\tnoscroll,\n\t\t\t\treplace_state,\n\t\t\t\tstate,\n\t\t\t\tredirect_count: redirect_count + 1,\n\t\t\t\tnav_token\n\t\t\t});\n\n\t\t\tnav.fulfil(undefined);\n\t\t\treturn;\n\t\t}\n\n\t\tnavigation_result = await load_root_error_page({\n\t\t\tstatus: 500,\n\t\t\terror: await handle_error(new Error('Redirect loop'), {\n\t\t\t\turl,\n\t\t\t\tparams: {},\n\t\t\t\troute: { id: null }\n\t\t\t}),\n\t\t\turl,\n\t\t\troute: { id: null }\n\t\t});\n\t} else if (/** @type {number} */ (navigation_result.props.page.status) >= 400) {\n\t\tconst updated = await stores.updated.check();\n\t\tif (updated) {\n\t\t\t// Before reloading, try to update the service worker if it exists\n\t\t\tawait update_service_worker();\n\t\t\tawait native_navigation(url, replace_state);\n\t\t}\n\t}\n\n\t// reset invalidation only after a finished navigation. If there are redirects or\n\t// additional invalidations, they should get the same invalidation treatment\n\treset_invalidation();\n\n\tupdating = true;\n\n\tupdate_scroll_positions(previous_history_index);\n\tcapture_snapshot(previous_navigation_index);\n\n\t// ensure the url pathname matches the page's trailing slash option\n\tif (navigation_result.props.page.url.pathname !== url.pathname) {\n\t\turl.pathname = navigation_result.props.page.url.pathname;\n\t}\n\n\tstate = popped ? popped.state : state;\n\n\tif (!popped) {\n\t\t// this is a new navigation, rather than a popstate\n\t\tconst change = replace_state ? 0 : 1;\n\n\t\tconst entry = {\n\t\t\t[HISTORY_INDEX]: (current_history_index += change),\n\t\t\t[NAVIGATION_INDEX]: (current_navigation_index += change),\n\t\t\t[STATES_KEY]: state\n\t\t};\n\n\t\tconst fn = replace_state ? history.replaceState : history.pushState;\n\t\tfn.call(history, entry, '', url);\n\n\t\tif (!replace_state) {\n\t\t\tclear_onward_history(current_history_index, current_navigation_index);\n\t\t}\n\t}\n\n\t// reset preload synchronously after the history state has been set to avoid race conditions\n\tload_cache = null;\n\n\tnavigation_result.props.page.state = state;\n\n\tif (started) {\n\t\tconst after_navigate = (\n\t\t\tawait Promise.all(\n\t\t\t\tArray.from(on_navigate_callbacks, (fn) =>\n\t\t\t\t\tfn(/** @type {import('@sveltejs/kit').OnNavigate} */ (nav.navigation))\n\t\t\t\t)\n\t\t\t)\n\t\t).filter(/** @returns {value is () => void} */ (value) => typeof value === 'function');\n\n\t\tif (after_navigate.length > 0) {\n\t\t\tfunction cleanup() {\n\t\t\t\tafter_navigate.forEach((fn) => {\n\t\t\t\t\tafter_navigate_callbacks.delete(fn);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tafter_navigate.push(cleanup);\n\n\t\t\tafter_navigate.forEach((fn) => {\n\t\t\t\tafter_navigate_callbacks.add(fn);\n\t\t\t});\n\t\t}\n\n\t\tcurrent = navigation_result.state;\n\n\t\t// reset url before updating page store\n\t\tif (navigation_result.props.page) {\n\t\t\tnavigation_result.props.page.url = url;\n\t\t}\n\n\t\troot.$set(navigation_result.props);\n\t\tupdate(navigation_result.props.page);\n\t\thas_navigated = true;\n\t} else {\n\t\tinitialize(navigation_result, target, false);\n\t}\n\n\tconst { activeElement } = document;\n\n\t// need to render the DOM before we can scroll to the rendered elements and do focus management\n\tawait tick();\n\n\t// we reset scroll before dealing with focus, to avoid a flash of unscrolled content\n\tlet scroll = popped ? popped.scroll : noscroll ? scroll_state() : null;\n\n\tif (autoscroll) {\n\t\tconst deep_linked = url.hash && document.getElementById(get_id(url));\n\t\tif (scroll) {\n\t\t\tscrollTo(scroll.x, scroll.y);\n\t\t} else if (deep_linked) {\n\t\t\t// Here we use `scrollIntoView` on the element instead of `scrollTo`\n\t\t\t// because it natively supports the `scroll-margin` and `scroll-behavior`\n\t\t\t// CSS properties.\n\t\t\tdeep_linked.scrollIntoView();\n\n\t\t\t// Get target position at this point because with smooth scrolling the scroll position\n\t\t\t// retrieved from current x/y above might be wrong (since we might not have arrived at the destination yet)\n\t\t\tconst { top, left } = deep_linked.getBoundingClientRect();\n\n\t\t\tscroll = {\n\t\t\t\tx: pageXOffset + left,\n\t\t\t\ty: pageYOffset + top\n\t\t\t};\n\t\t} else {\n\t\t\tscrollTo(0, 0);\n\t\t}\n\t}\n\n\tconst changed_focus =\n\t\t// reset focus only if any manual focus management didn't override it\n\t\tdocument.activeElement !== activeElement &&\n\t\t// also refocus when activeElement is body already because the\n\t\t// focus event might not have been fired on it yet\n\t\tdocument.activeElement !== document.body;\n\n\tif (!keepfocus && !changed_focus) {\n\t\treset_focus(url, scroll);\n\t}\n\n\tautoscroll = true;\n\n\tif (navigation_result.props.page) {\n\t\tObject.assign(page, navigation_result.props.page);\n\t}\n\n\tis_navigating = false;\n\n\tif (type === 'popstate') {\n\t\trestore_snapshot(current_navigation_index);\n\t}\n\n\tnav.fulfil(undefined);\n\n\tafter_navigate_callbacks.forEach((fn) =>\n\t\tfn(/** @type {import('@sveltejs/kit').AfterNavigate} */ (nav.navigation))\n\t);\n\n\tstores.navigating.set((navigating.current = null));\n\n\tupdating = false;\n}\n\n/**\n * Does a full page reload if it wouldn't result in an endless loop in the SPA case\n * @param {URL} url\n * @param {{ id: string | null }} route\n * @param {App.Error} error\n * @param {number} status\n * @param {boolean} [replace_state]\n * @returns {Promise<import('./types.js').NavigationFinished>}\n */\nasync function server_fallback(url, route, error, status, replace_state) {\n\tif (url.origin === origin && url.pathname === location.pathname && !hydrated) {\n\t\t// We would reload the same page we're currently on, which isn't hydrated,\n\t\t// which means no SSR, which means we would end up in an endless loop\n\t\treturn await load_root_error_page({\n\t\t\tstatus,\n\t\t\terror,\n\t\t\turl,\n\t\t\troute\n\t\t});\n\t}\n\n\tif (DEV && status !== 404) {\n\t\tconsole.error(\n\t\t\t'An error occurred while loading the page. This will cause a full page reload. (This message will only appear during development.)'\n\t\t);\n\n\t\tdebugger; // eslint-disable-line\n\t}\n\n\treturn await native_navigation(url, replace_state);\n}\n\nif (import.meta.hot) {\n\timport.meta.hot.on('vite:beforeUpdate', () => {\n\t\tif (current.error) location.reload();\n\t});\n}\n\n/** @typedef {(typeof PRELOAD_PRIORITIES)['hover'] | (typeof PRELOAD_PRIORITIES)['tap']} PreloadDataPriority */\n\nfunction setup_preload() {\n\t/** @type {NodeJS.Timeout} */\n\tlet mousemove_timeout;\n\t/** @type {Element} */\n\tlet current_a;\n\t/** @type {PreloadDataPriority} */\n\tlet current_priority;\n\n\tcontainer.addEventListener('mousemove', (event) => {\n\t\tconst target = /** @type {Element} */ (event.target);\n\n\t\tclearTimeout(mousemove_timeout);\n\t\tmousemove_timeout = setTimeout(() => {\n\t\t\tvoid preload(target, PRELOAD_PRIORITIES.hover);\n\t\t}, 20);\n\t});\n\n\t/** @param {Event} event */\n\tfunction tap(event) {\n\t\tif (event.defaultPrevented) return;\n\t\tvoid preload(/** @type {Element} */ (event.composedPath()[0]), PRELOAD_PRIORITIES.tap);\n\t}\n\n\tcontainer.addEventListener('mousedown', tap);\n\tcontainer.addEventListener('touchstart', tap, { passive: true });\n\n\tconst observer = new IntersectionObserver(\n\t\t(entries) => {\n\t\t\tfor (const entry of entries) {\n\t\t\t\tif (entry.isIntersecting) {\n\t\t\t\t\tvoid _preload_code(new URL(/** @type {HTMLAnchorElement} */ (entry.target).href));\n\t\t\t\t\tobserver.unobserve(entry.target);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{ threshold: 0 }\n\t);\n\n\t/**\n\t * @param {Element} element\n\t * @param {PreloadDataPriority} priority\n\t */\n\tasync function preload(element, priority) {\n\t\tconst a = find_anchor(element, container);\n\n\t\t// we don't want to preload data again if the user has already hovered/tapped\n\t\tconst interacted = a === current_a && priority >= current_priority;\n\t\tif (!a || interacted) return;\n\n\t\tconst { url, external, download } = get_link_info(a, base, app.hash);\n\t\tif (external || download) return;\n\n\t\tconst options = get_router_options(a);\n\n\t\t// we don't want to preload data for a page we're already on\n\t\tconst same_url = url && get_page_key(current.url) === get_page_key(url);\n\t\tif (options.reload || same_url) return;\n\n\t\tif (priority <= options.preload_data) {\n\t\t\tcurrent_a = a;\n\t\t\t// we don't want to preload data again on tap if we've already preloaded it on hover\n\t\t\tcurrent_priority = PRELOAD_PRIORITIES.tap;\n\n\t\t\tconst intent = await get_navigation_intent(url, false);\n\t\t\tif (!intent) return;\n\n\t\t\tif (DEV) {\n\t\t\t\tvoid _preload_data(intent).then((result) => {\n\t\t\t\t\tif (result.type === 'loaded' && result.state.error) {\n\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t`Preloading data for ${intent.url.pathname} failed with the following error: ${result.state.error.message}\\n` +\n\t\t\t\t\t\t\t\t'If this error is transient, you can ignore it. Otherwise, consider disabling preloading for this route. ' +\n\t\t\t\t\t\t\t\t'This route was preloaded due to a data-sveltekit-preload-data attribute. ' +\n\t\t\t\t\t\t\t\t'See https://svelte.dev/docs/kit/link-options for more info'\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tvoid _preload_data(intent);\n\t\t\t}\n\t\t} else if (priority <= options.preload_code) {\n\t\t\tcurrent_a = a;\n\t\t\tcurrent_priority = priority;\n\t\t\tvoid _preload_code(/** @type {URL} */ (url));\n\t\t}\n\t}\n\n\tfunction after_navigate() {\n\t\tobserver.disconnect();\n\n\t\tfor (const a of container.querySelectorAll('a')) {\n\t\t\tconst { url, external, download } = get_link_info(a, base, app.hash);\n\t\t\tif (external || download) continue;\n\n\t\t\tconst options = get_router_options(a);\n\t\t\tif (options.reload) continue;\n\n\t\t\tif (options.preload_code === PRELOAD_PRIORITIES.viewport) {\n\t\t\t\tobserver.observe(a);\n\t\t\t}\n\n\t\t\tif (options.preload_code === PRELOAD_PRIORITIES.eager) {\n\t\t\t\tvoid _preload_code(/** @type {URL} */ (url));\n\t\t\t}\n\t\t}\n\t}\n\n\tafter_navigate_callbacks.add(after_navigate);\n\tafter_navigate();\n}\n\n/**\n * @param {unknown} error\n * @param {import('@sveltejs/kit').NavigationEvent} event\n * @returns {import('types').MaybePromise<App.Error>}\n */\nfunction handle_error(error, event) {\n\tif (error instanceof HttpError) {\n\t\treturn error.body;\n\t}\n\n\tif (DEV) {\n\t\terrored = true;\n\t\tconsole.warn('The next HMR update will cause the page to reload');\n\t}\n\n\tconst status = get_status(error);\n\tconst message = get_message(error);\n\n\treturn (\n\t\tapp.hooks.handleError({ error, event, status, message }) ?? /** @type {any} */ ({ message })\n\t);\n}\n\n/**\n * @template {Function} T\n * @param {Set<T>} callbacks\n * @param {T} callback\n */\nfunction add_navigation_callback(callbacks, callback) {\n\tonMount(() => {\n\t\tcallbacks.add(callback);\n\n\t\treturn () => {\n\t\t\tcallbacks.delete(callback);\n\t\t};\n\t});\n}\n\n/**\n * A lifecycle function that runs the supplied `callback` when the current component mounts, and also whenever we navigate to a URL.\n *\n * `afterNavigate` must be called during a component initialization. It remains active as long as the component is mounted.\n * @param {(navigation: import('@sveltejs/kit').AfterNavigate) => void} callback\n * @returns {void}\n */\nexport function afterNavigate(callback) {\n\tadd_navigation_callback(after_navigate_callbacks, callback);\n}\n\n/**\n * A navigation interceptor that triggers before we navigate to a URL, whether by clicking a link, calling `goto(...)`, or using the browser back/forward controls.\n *\n * Calling `cancel()` will prevent the navigation from completing. If `navigation.type === 'leave'` — meaning the user is navigating away from the app (or closing the tab) — calling `cancel` will trigger the native browser unload confirmation dialog. In this case, the navigation may or may not be cancelled depending on the user's response.\n *\n * When a navigation isn't to a SvelteKit-owned route (and therefore controlled by SvelteKit's client-side router), `navigation.to.route.id` will be `null`.\n *\n * If the navigation will (if not cancelled) cause the document to unload — in other words `'leave'` navigations and `'link'` navigations where `navigation.to.route === null` — `navigation.willUnload` is `true`.\n *\n * `beforeNavigate` must be called during a component initialization. It remains active as long as the component is mounted.\n * @param {(navigation: import('@sveltejs/kit').BeforeNavigate) => void} callback\n * @returns {void}\n */\nexport function beforeNavigate(callback) {\n\tadd_navigation_callback(before_navigate_callbacks, callback);\n}\n\n/**\n * A lifecycle function that runs the supplied `callback` immediately before we navigate to a new URL except during full-page navigations.\n *\n * If you return a `Promise`, SvelteKit will wait for it to resolve before completing the navigation. This allows you to — for example — use `document.startViewTransition`. Avoid promises that are slow to resolve, since navigation will appear stalled to the user.\n *\n * If a function (or a `Promise` that resolves to a function) is returned from the callback, it will be called once the DOM has updated.\n *\n * `onNavigate` must be called during a component initialization. It remains active as long as the component is mounted.\n * @param {(navigation: import('@sveltejs/kit').OnNavigate) => import('types').MaybePromise<(() => void) | void>} callback\n * @returns {void}\n */\nexport function onNavigate(callback) {\n\tadd_navigation_callback(on_navigate_callbacks, callback);\n}\n\n/**\n * If called when the page is being updated following a navigation (in `onMount` or `afterNavigate` or an action, for example), this disables SvelteKit's built-in scroll handling.\n * This is generally discouraged, since it breaks user expectations.\n * @returns {void}\n */\nexport function disableScrollHandling() {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call disableScrollHandling() on the server');\n\t}\n\n\tif (DEV && started && !updating) {\n\t\tthrow new Error('Can only disable scroll handling during navigation');\n\t}\n\n\tif (updating || !started) {\n\t\tautoscroll = false;\n\t}\n}\n\n/**\n * Allows you to navigate programmatically to a given route, with options such as keeping the current element focused.\n * Returns a Promise that resolves when SvelteKit navigates (or fails to navigate, in which case the promise rejects) to the specified `url`.\n *\n * For external URLs, use `window.location = url` instead of calling `goto(url)`.\n *\n * @param {string | URL} url Where to navigate to. Note that if you've set [`config.kit.paths.base`](https://svelte.dev/docs/kit/configuration#paths) and the URL is root-relative, you need to prepend the base path if you want to navigate within the app.\n * @param {Object} [opts] Options related to the navigation\n * @param {boolean} [opts.replaceState] If `true`, will replace the current `history` entry rather than creating a new one with `pushState`\n * @param {boolean} [opts.noScroll] If `true`, the browser will maintain its scroll position rather than scrolling to the top of the page after navigation\n * @param {boolean} [opts.keepFocus] If `true`, the currently focused element will retain focus after navigation. Otherwise, focus will be reset to the body\n * @param {boolean} [opts.invalidateAll] If `true`, all `load` functions of the page will be rerun. See https://svelte.dev/docs/kit/load#rerunning-load-functions for more info on invalidation.\n * @param {Array<string | URL | ((url: URL) => boolean)>} [opts.invalidate] Causes any load functions to re-run if they depend on one of the urls\n * @param {App.PageState} [opts.state] An optional object that will be available as `page.state`\n * @returns {Promise<void>}\n */\nexport function goto(url, opts = {}) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call goto(...) on the server');\n\t}\n\n\turl = new URL(resolve_url(url));\n\n\tif (url.origin !== origin) {\n\t\treturn Promise.reject(\n\t\t\tnew Error(\n\t\t\t\tDEV\n\t\t\t\t\t? `Cannot use \\`goto\\` with an external URL. Use \\`window.location = \"${url}\"\\` instead`\n\t\t\t\t\t: 'goto: invalid URL'\n\t\t\t)\n\t\t);\n\t}\n\n\treturn _goto(url, opts, 0);\n}\n\n/**\n * Causes any `load` functions belonging to the currently active page to re-run if they depend on the `url` in question, via `fetch` or `depends`. Returns a `Promise` that resolves when the page is subsequently updated.\n *\n * If the argument is given as a `string` or `URL`, it must resolve to the same URL that was passed to `fetch` or `depends` (including query parameters).\n * To create a custom identifier, use a string beginning with `[a-z]+:` (e.g. `custom:state`) — this is a valid URL.\n *\n * The `function` argument can be used define a custom predicate. It receives the full `URL` and causes `load` to rerun if `true` is returned.\n * This can be useful if you want to invalidate based on a pattern instead of a exact match.\n *\n * ```ts\n * // Example: Match '/path' regardless of the query parameters\n * import { invalidate } from '$app/navigation';\n *\n * invalidate((url) => url.pathname === '/path');\n * ```\n * @param {string | URL | ((url: URL) => boolean)} resource The invalidated URL\n * @returns {Promise<void>}\n */\nexport function invalidate(resource) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call invalidate(...) on the server');\n\t}\n\n\tpush_invalidated(resource);\n\n\treturn _invalidate();\n}\n\n/**\n * @param {string | URL | ((url: URL) => boolean)} resource The invalidated URL\n */\nfunction push_invalidated(resource) {\n\tif (typeof resource === 'function') {\n\t\tinvalidated.push(resource);\n\t} else {\n\t\tconst { href } = new URL(resource, location.href);\n\t\tinvalidated.push((url) => url.href === href);\n\t}\n}\n\n/**\n * Causes all `load` functions belonging to the currently active page to re-run. Returns a `Promise` that resolves when the page is subsequently updated.\n * @returns {Promise<void>}\n */\nexport function invalidateAll() {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call invalidateAll() on the server');\n\t}\n\n\tforce_invalidation = true;\n\treturn _invalidate();\n}\n\n/**\n * Causes all currently active remote functions to refresh, and all `load` functions belonging to the currently active page to re-run (unless disabled via the option argument).\n * Returns a `Promise` that resolves when the page is subsequently updated.\n * @param {{ includeLoadFunctions?: boolean }} [options]\n * @returns {Promise<void>}\n */\nexport function refreshAll({ includeLoadFunctions = true } = {}) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call refreshAll() on the server');\n\t}\n\n\tremote_responses = {};\n\n\tforce_invalidation = true;\n\treturn _invalidate(includeLoadFunctions, false);\n}\n\n/**\n * Programmatically preloads the given page, which means\n *  1. ensuring that the code for the page is loaded, and\n *  2. calling the page's load function with the appropriate options.\n *\n * This is the same behaviour that SvelteKit triggers when the user taps or mouses over an `<a>` element with `data-sveltekit-preload-data`.\n * If the next navigation is to `href`, the values returned from load will be used, making navigation instantaneous.\n * Returns a Promise that resolves with the result of running the new route's `load` functions once the preload is complete.\n *\n * @param {string} href Page to preload\n * @returns {Promise<{ type: 'loaded'; status: number; data: Record<string, any> } | { type: 'redirect'; location: string }>}\n */\nexport async function preloadData(href) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call preloadData(...) on the server');\n\t}\n\n\tconst url = resolve_url(href);\n\tconst intent = await get_navigation_intent(url, false);\n\n\tif (!intent) {\n\t\tthrow new Error(`Attempted to preload a URL that does not belong to this app: ${url}`);\n\t}\n\n\tconst result = await _preload_data(intent);\n\tif (result.type === 'redirect') {\n\t\treturn {\n\t\t\ttype: result.type,\n\t\t\tlocation: result.location\n\t\t};\n\t}\n\n\tconst { status, data } = result.props.page ?? page;\n\treturn { type: result.type, status, data };\n}\n\n/**\n * Programmatically imports the code for routes that haven't yet been fetched.\n * Typically, you might call this to speed up subsequent navigation.\n *\n * You can specify routes by any matching pathname such as `/about` (to match `src/routes/about/+page.svelte`) or `/blog/*` (to match `src/routes/blog/[slug]/+page.svelte`).\n *\n * Unlike `preloadData`, this won't call `load` functions.\n * Returns a Promise that resolves when the modules have been imported.\n *\n * @param {string} pathname\n * @returns {Promise<void>}\n */\nexport async function preloadCode(pathname) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call preloadCode(...) on the server');\n\t}\n\n\tconst url = new URL(pathname, current.url);\n\n\tif (DEV) {\n\t\tif (!pathname.startsWith('/')) {\n\t\t\tthrow new Error(\n\t\t\t\t'argument passed to preloadCode must be a pathname (i.e. \"/about\" rather than \"http://example.com/about\"'\n\t\t\t);\n\t\t}\n\n\t\tif (!pathname.startsWith(base)) {\n\t\t\tthrow new Error(\n\t\t\t\t`pathname passed to preloadCode must start with \\`paths.base\\` (i.e. \"${base}${pathname}\" rather than \"${pathname}\")`\n\t\t\t);\n\t\t}\n\n\t\tif (__SVELTEKIT_CLIENT_ROUTING__) {\n\t\t\tconst rerouted = await get_rerouted_url(url);\n\t\t\tif (!rerouted || !routes.find((route) => route.exec(get_url_path(rerouted)))) {\n\t\t\t\tthrow new Error(`'${pathname}' did not match any routes`);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn _preload_code(url);\n}\n\n/**\n * Programmatically create a new history entry with the given `page.state`. To use the current URL, you can pass `''` as the first argument. Used for [shallow routing](https://svelte.dev/docs/kit/shallow-routing).\n *\n * @param {string | URL} url\n * @param {App.PageState} state\n * @returns {void}\n */\nexport function pushState(url, state) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call pushState(...) on the server');\n\t}\n\n\tif (DEV) {\n\t\tif (!started) {\n\t\t\tthrow new Error('Cannot call pushState(...) before router is initialized');\n\t\t}\n\n\t\ttry {\n\t\t\t// use `devalue.stringify` as a convenient way to ensure we exclude values that can't be properly rehydrated, such as custom class instances\n\t\t\tdevalue.stringify(state);\n\t\t} catch (error) {\n\t\t\t// @ts-expect-error\n\t\t\tthrow new Error(`Could not serialize state${error.path}`);\n\t\t}\n\t}\n\n\tupdate_scroll_positions(current_history_index);\n\n\tconst opts = {\n\t\t[HISTORY_INDEX]: (current_history_index += 1),\n\t\t[NAVIGATION_INDEX]: current_navigation_index,\n\t\t[PAGE_URL_KEY]: page.url.href,\n\t\t[STATES_KEY]: state\n\t};\n\n\thistory.pushState(opts, '', resolve_url(url));\n\thas_navigated = true;\n\n\tpage.state = state;\n\troot.$set({\n\t\t// we need to assign a new page object so that subscribers are correctly notified\n\t\tpage: untrack(() => clone_page(page))\n\t});\n\n\tclear_onward_history(current_history_index, current_navigation_index);\n}\n\n/**\n * Programmatically replace the current history entry with the given `page.state`. To use the current URL, you can pass `''` as the first argument. Used for [shallow routing](https://svelte.dev/docs/kit/shallow-routing).\n *\n * @param {string | URL} url\n * @param {App.PageState} state\n * @returns {void}\n */\nexport function replaceState(url, state) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call replaceState(...) on the server');\n\t}\n\n\tif (DEV) {\n\t\tif (!started) {\n\t\t\tthrow new Error('Cannot call replaceState(...) before router is initialized');\n\t\t}\n\n\t\ttry {\n\t\t\t// use `devalue.stringify` as a convenient way to ensure we exclude values that can't be properly rehydrated, such as custom class instances\n\t\t\tdevalue.stringify(state);\n\t\t} catch (error) {\n\t\t\t// @ts-expect-error\n\t\t\tthrow new Error(`Could not serialize state${error.path}`);\n\t\t}\n\t}\n\n\tconst opts = {\n\t\t[HISTORY_INDEX]: current_history_index,\n\t\t[NAVIGATION_INDEX]: current_navigation_index,\n\t\t[PAGE_URL_KEY]: page.url.href,\n\t\t[STATES_KEY]: state\n\t};\n\n\thistory.replaceState(opts, '', resolve_url(url));\n\n\tpage.state = state;\n\troot.$set({\n\t\tpage: untrack(() => clone_page(page))\n\t});\n}\n\n/**\n * This action updates the `form` property of the current page with the given data and updates `page.status`.\n * In case of an error, it redirects to the nearest error page.\n * @template {Record<string, unknown> | undefined} Success\n * @template {Record<string, unknown> | undefined} Failure\n * @param {import('@sveltejs/kit').ActionResult<Success, Failure>} result\n * @returns {Promise<void>}\n */\nexport async function applyAction(result) {\n\tif (!BROWSER) {\n\t\tthrow new Error('Cannot call applyAction(...) on the server');\n\t}\n\n\tif (result.type === 'error') {\n\t\tawait set_nearest_error_page(result.error, result.status);\n\t} else if (result.type === 'redirect') {\n\t\tawait _goto(result.location, { invalidateAll: true }, 0);\n\t} else {\n\t\tpage.form = result.data;\n\t\tpage.status = result.status;\n\n\t\t/** @type {Record<string, any>} */\n\t\troot.$set({\n\t\t\t// this brings Svelte's view of the world in line with SvelteKit's\n\t\t\t// after use:enhance reset the form....\n\t\t\tform: null,\n\t\t\tpage: clone_page(page)\n\t\t});\n\n\t\t// ...so that setting the `form` prop takes effect and isn't ignored\n\t\tawait tick();\n\t\troot.$set({ form: result.data });\n\n\t\tif (result.type === 'success') {\n\t\t\treset_focus(page.url);\n\t\t}\n\t}\n}\n\n/**\n * @param {App.Error} error\n * @param {number} status\n */\nexport async function set_nearest_error_page(error, status = 500) {\n\tconst url = new URL(location.href);\n\n\tconst { branch, route } = current;\n\tif (!route) return;\n\n\tconst error_load = await load_nearest_error_page(current.branch.length, branch, route.errors);\n\tif (error_load) {\n\t\tconst navigation_result = get_navigation_result_from_branch({\n\t\t\turl,\n\t\t\tparams: current.params,\n\t\t\tbranch: branch.slice(0, error_load.idx).concat(error_load.node),\n\t\t\tstatus,\n\t\t\terror,\n\t\t\troute\n\t\t});\n\n\t\tcurrent = navigation_result.state;\n\n\t\troot.$set(navigation_result.props);\n\t\tupdate(navigation_result.props.page);\n\n\t\tvoid tick().then(() => reset_focus(current.url));\n\t}\n}\n\nfunction _start_router() {\n\thistory.scrollRestoration = 'manual';\n\n\t// Adopted from Nuxt.js\n\t// Reset scrollRestoration to auto when leaving page, allowing page reload\n\t// and back-navigation from other pages to use the browser to restore the\n\t// scrolling position.\n\taddEventListener('beforeunload', (e) => {\n\t\tlet should_block = false;\n\n\t\tpersist_state();\n\n\t\tif (!is_navigating) {\n\t\t\tconst nav = create_navigation(current, undefined, null, 'leave');\n\n\t\t\t// If we're navigating, beforeNavigate was already called. If we end up in here during navigation,\n\t\t\t// it's due to an external or full-page-reload link, for which we don't want to call the hook again.\n\t\t\t/** @type {import('@sveltejs/kit').BeforeNavigate} */\n\t\t\tconst navigation = {\n\t\t\t\t...nav.navigation,\n\t\t\t\tcancel: () => {\n\t\t\t\t\tshould_block = true;\n\t\t\t\t\tnav.reject(new Error('navigation cancelled'));\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tbefore_navigate_callbacks.forEach((fn) => fn(navigation));\n\t\t}\n\n\t\tif (should_block) {\n\t\t\te.preventDefault();\n\t\t\te.returnValue = '';\n\t\t} else {\n\t\t\thistory.scrollRestoration = 'auto';\n\t\t}\n\t});\n\n\taddEventListener('visibilitychange', () => {\n\t\tif (document.visibilityState === 'hidden') {\n\t\t\tpersist_state();\n\t\t}\n\t});\n\n\t// @ts-expect-error this isn't supported everywhere yet\n\tif (!navigator.connection?.saveData) {\n\t\tsetup_preload();\n\t}\n\n\t/** @param {MouseEvent} event */\n\tcontainer.addEventListener('click', async (event) => {\n\t\t// Adapted from https://github.com/visionmedia/page.js\n\t\t// MIT license https://github.com/visionmedia/page.js#license\n\t\tif (event.button || event.which !== 1) return;\n\t\tif (event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) return;\n\t\tif (event.defaultPrevented) return;\n\n\t\tconst a = find_anchor(/** @type {Element} */ (event.composedPath()[0]), container);\n\t\tif (!a) return;\n\n\t\tconst { url, external, target, download } = get_link_info(a, base, app.hash);\n\t\tif (!url) return;\n\n\t\t// bail out before `beforeNavigate` if link opens in a different tab\n\t\tif (target === '_parent' || target === '_top') {\n\t\t\tif (window.parent !== window) return;\n\t\t} else if (target && target !== '_self') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst options = get_router_options(a);\n\t\tconst is_svg_a_element = a instanceof SVGAElement;\n\n\t\t// Ignore URL protocols that differ to the current one and are not http(s) (e.g. `mailto:`, `tel:`, `myapp:`, etc.)\n\t\t// This may be wrong when the protocol is x: and the link goes to y:.. which should be treated as an external\n\t\t// navigation, but it's not clear how to handle that case and it's not likely to come up in practice.\n\t\t// MEMO: Without this condition, firefox will open mailer twice.\n\t\t// See:\n\t\t// - https://github.com/sveltejs/kit/issues/4045\n\t\t// - https://github.com/sveltejs/kit/issues/5725\n\t\t// - https://github.com/sveltejs/kit/issues/6496\n\t\tif (\n\t\t\t!is_svg_a_element &&\n\t\t\turl.protocol !== location.protocol &&\n\t\t\t!(url.protocol === 'https:' || url.protocol === 'http:')\n\t\t)\n\t\t\treturn;\n\n\t\tif (download) return;\n\n\t\tconst [nonhash, hash] = (app.hash ? url.hash.replace(/^#/, '') : url.href).split('#');\n\t\tconst same_pathname = nonhash === strip_hash(location);\n\n\t\t// Ignore the following but fire beforeNavigate\n\t\tif (external || (options.reload && (!same_pathname || !hash))) {\n\t\t\tif (_before_navigate({ url, type: 'link', event })) {\n\t\t\t\t// set `navigating` to `true` to prevent `beforeNavigate` callbacks\n\t\t\t\t// being called when the page unloads\n\t\t\t\tis_navigating = true;\n\t\t\t} else {\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if new url only differs by hash and use the browser default behavior in that case\n\t\t// This will ensure the `hashchange` event is fired\n\t\t// Removing the hash does a full page navigation in the browser, so make sure a hash is present\n\t\tif (hash !== undefined && same_pathname) {\n\t\t\t// If we are trying to navigate to the same hash, we should only\n\t\t\t// attempt to scroll to that element and avoid any history changes.\n\t\t\t// Otherwise, this can cause Firefox to incorrectly assign a null\n\t\t\t// history state value without any signal that we can detect.\n\t\t\tconst [, current_hash] = current.url.href.split('#');\n\t\t\tif (current_hash === hash) {\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\t// We're already on /# and click on a link that goes to /#, or we're on\n\t\t\t\t// /#top and click on a link that goes to /#top. In those cases just go to\n\t\t\t\t// the top of the page, and avoid a history change.\n\t\t\t\tif (hash === '' || (hash === 'top' && a.ownerDocument.getElementById('top') === null)) {\n\t\t\t\t\tscrollTo({ top: 0 });\n\t\t\t\t} else {\n\t\t\t\t\tconst element = a.ownerDocument.getElementById(decodeURIComponent(hash));\n\t\t\t\t\tif (element) {\n\t\t\t\t\t\telement.scrollIntoView();\n\t\t\t\t\t\telement.focus();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// set this flag to distinguish between navigations triggered by\n\t\t\t// clicking a hash link and those triggered by popstate\n\t\t\thash_navigating = true;\n\n\t\t\tupdate_scroll_positions(current_history_index);\n\n\t\t\tupdate_url(url);\n\n\t\t\tif (!options.replace_state) return;\n\n\t\t\t// hashchange event shouldn't occur if the router is replacing state.\n\t\t\thash_navigating = false;\n\t\t}\n\n\t\tevent.preventDefault();\n\n\t\t// allow the browser to repaint before navigating —\n\t\t// this prevents INP scores being penalised\n\t\tawait new Promise((fulfil) => {\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tsetTimeout(fulfil, 0);\n\t\t\t});\n\n\t\t\tsetTimeout(fulfil, 100); // fallback for edge case where rAF doesn't fire because e.g. tab was backgrounded\n\t\t});\n\n\t\tawait navigate({\n\t\t\ttype: 'link',\n\t\t\turl,\n\t\t\tkeepfocus: options.keepfocus,\n\t\t\tnoscroll: options.noscroll,\n\t\t\treplace_state: options.replace_state ?? url.href === location.href,\n\t\t\tevent\n\t\t});\n\t});\n\n\tcontainer.addEventListener('submit', (event) => {\n\t\tif (event.defaultPrevented) return;\n\n\t\tconst form = /** @type {HTMLFormElement} */ (\n\t\t\tHTMLFormElement.prototype.cloneNode.call(event.target)\n\t\t);\n\n\t\tconst submitter = /** @type {HTMLButtonElement | HTMLInputElement | null} */ (event.submitter);\n\n\t\tconst target = submitter?.formTarget || form.target;\n\n\t\tif (target === '_blank') return;\n\n\t\tconst method = submitter?.formMethod || form.method;\n\n\t\tif (method !== 'get') return;\n\n\t\t// It is impossible to use form actions with hash router, so we just ignore handling them here\n\t\tconst url = new URL(\n\t\t\t(submitter?.hasAttribute('formaction') && submitter?.formAction) || form.action\n\t\t);\n\n\t\tif (is_external_url(url, base, false)) return;\n\n\t\tconst event_form = /** @type {HTMLFormElement} */ (event.target);\n\n\t\tconst options = get_router_options(event_form);\n\t\tif (options.reload) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tconst data = new FormData(event_form, submitter);\n\n\t\t// @ts-expect-error `URLSearchParams(fd)` is kosher, but typescript doesn't know that\n\t\turl.search = new URLSearchParams(data).toString();\n\n\t\tvoid navigate({\n\t\t\ttype: 'form',\n\t\t\turl,\n\t\t\tkeepfocus: options.keepfocus,\n\t\t\tnoscroll: options.noscroll,\n\t\t\treplace_state: options.replace_state ?? url.href === location.href,\n\t\t\tevent\n\t\t});\n\t});\n\n\taddEventListener('popstate', async (event) => {\n\t\tif (resetting_focus) return;\n\n\t\tif (event.state?.[HISTORY_INDEX]) {\n\t\t\tconst history_index = event.state[HISTORY_INDEX];\n\t\t\ttoken = {};\n\n\t\t\t// if a popstate-driven navigation is cancelled, we need to counteract it\n\t\t\t// with history.go, which means we end up back here, hence this check\n\t\t\tif (history_index === current_history_index) return;\n\n\t\t\tconst scroll = scroll_positions[history_index];\n\t\t\tconst state = event.state[STATES_KEY] ?? {};\n\t\t\tconst url = new URL(event.state[PAGE_URL_KEY] ?? location.href);\n\t\t\tconst navigation_index = event.state[NAVIGATION_INDEX];\n\t\t\tconst is_hash_change = current.url ? strip_hash(location) === strip_hash(current.url) : false;\n\t\t\tconst shallow =\n\t\t\t\tnavigation_index === current_navigation_index && (has_navigated || is_hash_change);\n\n\t\t\tif (shallow) {\n\t\t\t\t// We don't need to navigate, we just need to update scroll and/or state.\n\t\t\t\t// This happens with hash links and `pushState`/`replaceState`. The\n\t\t\t\t// exception is if we haven't navigated yet, since we could have\n\t\t\t\t// got here after a modal navigation then a reload\n\t\t\t\tif (state !== page.state) {\n\t\t\t\t\tpage.state = state;\n\t\t\t\t}\n\n\t\t\t\tupdate_url(url);\n\n\t\t\t\tscroll_positions[current_history_index] = scroll_state();\n\t\t\t\tif (scroll) scrollTo(scroll.x, scroll.y);\n\n\t\t\t\tcurrent_history_index = history_index;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst delta = history_index - current_history_index;\n\n\t\t\tawait navigate({\n\t\t\t\ttype: 'popstate',\n\t\t\t\turl,\n\t\t\t\tpopped: {\n\t\t\t\t\tstate,\n\t\t\t\t\tscroll,\n\t\t\t\t\tdelta\n\t\t\t\t},\n\t\t\t\taccept: () => {\n\t\t\t\t\tcurrent_history_index = history_index;\n\t\t\t\t\tcurrent_navigation_index = navigation_index;\n\t\t\t\t},\n\t\t\t\tblock: () => {\n\t\t\t\t\thistory.go(-delta);\n\t\t\t\t},\n\t\t\t\tnav_token: token,\n\t\t\t\tevent\n\t\t\t});\n\t\t} else {\n\t\t\t// since popstate event is also emitted when an anchor referencing the same\n\t\t\t// document is clicked, we have to check that the router isn't already handling\n\t\t\t// the navigation. otherwise we would be updating the page store twice.\n\t\t\tif (!hash_navigating) {\n\t\t\t\tconst url = new URL(location.href);\n\t\t\t\tupdate_url(url);\n\n\t\t\t\t// if the user edits the hash via the browser URL bar, trigger a full-page\n\t\t\t\t// reload to align with pathname router behavior\n\t\t\t\tif (app.hash) {\n\t\t\t\t\tlocation.reload();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\taddEventListener('hashchange', () => {\n\t\t// if the hashchange happened as a result of clicking on a link,\n\t\t// we need to update history, otherwise we have to leave it alone\n\t\tif (hash_navigating) {\n\t\t\thash_navigating = false;\n\t\t\thistory.replaceState(\n\t\t\t\t{\n\t\t\t\t\t...history.state,\n\t\t\t\t\t[HISTORY_INDEX]: ++current_history_index,\n\t\t\t\t\t[NAVIGATION_INDEX]: current_navigation_index\n\t\t\t\t},\n\t\t\t\t'',\n\t\t\t\tlocation.href\n\t\t\t);\n\t\t}\n\t});\n\n\t// fix link[rel=icon], because browsers will occasionally try to load relative\n\t// URLs after a pushState/replaceState, resulting in a 404 — see\n\t// https://github.com/sveltejs/kit/issues/3748#issuecomment-1125980897\n\tfor (const link of document.querySelectorAll('link')) {\n\t\tif (ICON_REL_ATTRIBUTES.has(link.rel)) {\n\t\t\tlink.href = link.href; // eslint-disable-line\n\t\t}\n\t}\n\n\taddEventListener('pageshow', (event) => {\n\t\t// If the user navigates to another site and then uses the back button and\n\t\t// bfcache hits, we need to set navigating to null, the site doesn't know\n\t\t// the navigation away from it was successful.\n\t\t// Info about bfcache here: https://web.dev/bfcache\n\t\tif (event.persisted) {\n\t\t\tstores.navigating.set((navigating.current = null));\n\t\t}\n\t});\n\n\t/**\n\t * @param {URL} url\n\t */\n\tfunction update_url(url) {\n\t\tcurrent.url = page.url = url;\n\t\tstores.page.set(clone_page(page));\n\t\tstores.page.notify();\n\t}\n}\n\n/**\n * @param {HTMLElement} target\n * @param {import('./types.js').HydrateOptions} opts\n */\nasync function _hydrate(\n\ttarget,\n\t{ status = 200, error, node_ids, params, route, server_route, data: server_data_nodes, form }\n) {\n\thydrated = true;\n\n\tconst url = new URL(location.href);\n\n\t/** @type {import('types').CSRRoute | undefined} */\n\tlet parsed_route;\n\n\tif (__SVELTEKIT_CLIENT_ROUTING__) {\n\t\tif (!__SVELTEKIT_EMBEDDED__) {\n\t\t\t// See https://github.com/sveltejs/kit/pull/4935#issuecomment-1328093358 for one motivation\n\t\t\t// of determining the params on the client side.\n\t\t\t({ params = {}, route = { id: null } } = (await get_navigation_intent(url, false)) || {});\n\t\t}\n\n\t\tparsed_route = routes.find(({ id }) => id === route.id);\n\t} else {\n\t\t// undefined in case of 404\n\t\tif (server_route) {\n\t\t\tparsed_route = route = parse_server_route(server_route, app.nodes);\n\t\t} else {\n\t\t\troute = { id: null };\n\t\t\tparams = {};\n\t\t}\n\t}\n\n\t/** @type {import('./types.js').NavigationFinished | undefined} */\n\tlet result;\n\tlet hydrate = true;\n\n\ttry {\n\t\tconst branch_promises = node_ids.map(async (n, i) => {\n\t\t\tconst server_data_node = server_data_nodes[i];\n\t\t\t// Type isn't completely accurate, we still need to deserialize uses\n\t\t\tif (server_data_node?.uses) {\n\t\t\t\tserver_data_node.uses = deserialize_uses(server_data_node.uses);\n\t\t\t}\n\n\t\t\treturn load_node({\n\t\t\t\tloader: app.nodes[n],\n\t\t\t\turl,\n\t\t\t\tparams,\n\t\t\t\troute,\n\t\t\t\tparent: async () => {\n\t\t\t\t\tconst data = {};\n\t\t\t\t\tfor (let j = 0; j < i; j += 1) {\n\t\t\t\t\t\tObject.assign(data, (await branch_promises[j]).data);\n\t\t\t\t\t}\n\t\t\t\t\treturn data;\n\t\t\t\t},\n\t\t\t\tserver_data_node: create_data_node(server_data_node)\n\t\t\t});\n\t\t});\n\n\t\t/** @type {Array<import('./types.js').BranchNode | undefined>} */\n\t\tconst branch = await Promise.all(branch_promises);\n\n\t\t// server-side will have compacted the branch, reinstate empty slots\n\t\t// so that error boundaries can be lined up correctly\n\t\tif (parsed_route) {\n\t\t\tconst layouts = parsed_route.layouts;\n\t\t\tfor (let i = 0; i < layouts.length; i++) {\n\t\t\t\tif (!layouts[i]) {\n\t\t\t\t\tbranch.splice(i, 0, undefined);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tresult = get_navigation_result_from_branch({\n\t\t\turl,\n\t\t\tparams,\n\t\t\tbranch,\n\t\t\tstatus,\n\t\t\terror,\n\t\t\tform,\n\t\t\troute: parsed_route ?? null\n\t\t});\n\t} catch (error) {\n\t\tif (error instanceof Redirect) {\n\t\t\t// this is a real edge case — `load` would need to return\n\t\t\t// a redirect but only in the browser\n\t\t\tawait native_navigation(new URL(error.location, location.href));\n\t\t\treturn;\n\t\t}\n\n\t\tresult = await load_root_error_page({\n\t\t\tstatus: get_status(error),\n\t\t\terror: await handle_error(error, { url, params, route }),\n\t\t\turl,\n\t\t\troute\n\t\t});\n\n\t\ttarget.textContent = '';\n\t\thydrate = false;\n\t}\n\n\tif (result.props.page) {\n\t\tresult.props.page.state = {};\n\t}\n\n\tinitialize(result, target, hydrate);\n}\n\n/**\n * @param {URL} url\n * @param {boolean[]} invalid\n * @returns {Promise<import('types').ServerNodesResponse | import('types').ServerRedirectNode>}\n */\nasync function load_data(url, invalid) {\n\tconst data_url = new URL(url);\n\tdata_url.pathname = add_data_suffix(url.pathname);\n\tif (url.pathname.endsWith('/')) {\n\t\tdata_url.searchParams.append(TRAILING_SLASH_PARAM, '1');\n\t}\n\tif (DEV && url.searchParams.has(INVALIDATED_PARAM)) {\n\t\tthrow new Error(`Cannot used reserved query parameter \"${INVALIDATED_PARAM}\"`);\n\t}\n\tdata_url.searchParams.append(INVALIDATED_PARAM, invalid.map((i) => (i ? '1' : '0')).join(''));\n\n\t// use window.fetch directly to allow using a 3rd party-patched fetch implementation\n\tconst fetcher = DEV ? dev_fetch : window.fetch;\n\tconst res = await fetcher(data_url.href, {});\n\n\tif (!res.ok) {\n\t\t// error message is a JSON-stringified string which devalue can't handle at the top level\n\t\t// turn it into a HttpError to not call handleError on the client again (was already handled on the server)\n\t\t// if `__data.json` doesn't exist or the server has an internal error,\n\t\t// avoid parsing the HTML error page as a JSON\n\t\t/** @type {string | undefined} */\n\t\tlet message;\n\t\tif (res.headers.get('content-type')?.includes('application/json')) {\n\t\t\tmessage = await res.json();\n\t\t} else if (res.status === 404) {\n\t\t\tmessage = 'Not Found';\n\t\t} else if (res.status === 500) {\n\t\t\tmessage = 'Internal Error';\n\t\t}\n\t\tthrow new HttpError(res.status, message);\n\t}\n\n\t// TODO: fix eslint error / figure out if it actually applies to our situation\n\t// eslint-disable-next-line\n\treturn new Promise(async (resolve) => {\n\t\t/**\n\t\t * Map of deferred promises that will be resolved by a subsequent chunk of data\n\t\t * @type {Map<string, import('types').Deferred>}\n\t\t */\n\t\tconst deferreds = new Map();\n\t\tconst reader = /** @type {ReadableStream<Uint8Array>} */ (res.body).getReader();\n\n\t\t/**\n\t\t * @param {any} data\n\t\t */\n\t\tfunction deserialize(data) {\n\t\t\treturn devalue.unflatten(data, {\n\t\t\t\t...app.decoders,\n\t\t\t\tPromise: (id) => {\n\t\t\t\t\treturn new Promise((fulfil, reject) => {\n\t\t\t\t\t\tdeferreds.set(id, { fulfil, reject });\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tlet text = '';\n\n\t\twhile (true) {\n\t\t\t// Format follows ndjson (each line is a JSON object) or regular JSON spec\n\t\t\tconst { done, value } = await reader.read();\n\t\t\tif (done && !text) break;\n\n\t\t\ttext += !value && text ? '\\n' : text_decoder.decode(value, { stream: true }); // no value -> final chunk -> add a new line to trigger the last parse\n\n\t\t\twhile (true) {\n\t\t\t\tconst split = text.indexOf('\\n');\n\t\t\t\tif (split === -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst node = JSON.parse(text.slice(0, split));\n\t\t\t\ttext = text.slice(split + 1);\n\n\t\t\t\tif (node.type === 'redirect') {\n\t\t\t\t\treturn resolve(node);\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'data') {\n\t\t\t\t\t// This is the first (and possibly only, if no pending promises) chunk\n\t\t\t\t\tnode.nodes?.forEach((/** @type {any} */ node) => {\n\t\t\t\t\t\tif (node?.type === 'data') {\n\t\t\t\t\t\t\tnode.uses = deserialize_uses(node.uses);\n\t\t\t\t\t\t\tnode.data = deserialize(node.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tresolve(node);\n\t\t\t\t} else if (node.type === 'chunk') {\n\t\t\t\t\t// This is a subsequent chunk containing deferred data\n\t\t\t\t\tconst { id, data, error } = node;\n\t\t\t\t\tconst deferred = /** @type {import('types').Deferred} */ (deferreds.get(id));\n\t\t\t\t\tdeferreds.delete(id);\n\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tdeferred.reject(deserialize(error));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdeferred.fulfil(deserialize(data));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// TODO edge case handling necessary? stream() read fails?\n}\n\n/**\n * @param {any} uses\n * @return {import('types').Uses}\n */\nfunction deserialize_uses(uses) {\n\treturn {\n\t\tdependencies: new Set(uses?.dependencies ?? []),\n\t\tparams: new Set(uses?.params ?? []),\n\t\tparent: !!uses?.parent,\n\t\troute: !!uses?.route,\n\t\turl: !!uses?.url,\n\t\tsearch_params: new Set(uses?.search_params ?? [])\n\t};\n}\n\n/**\n * This flag is used to avoid client-side navigation when we're only using\n * `location.replace()` to set focus.\n */\nlet resetting_focus = false;\n\n/**\n * @param {URL} url\n * @param {{ x: number, y: number } | null} scroll\n */\nfunction reset_focus(url, scroll = null) {\n\tconst autofocus = document.querySelector('[autofocus]');\n\tif (autofocus) {\n\t\t// @ts-ignore\n\t\tautofocus.focus();\n\t} else {\n\t\t// Reset page selection and focus\n\n\t\t// Mimic the browsers' behaviour and set the sequential focus navigation\n\t\t// starting point to the fragment identifier.\n\t\tconst id = get_id(url);\n\t\tif (id && document.getElementById(id)) {\n\t\t\tconst { x, y } = scroll ?? scroll_state();\n\n\t\t\t// `element.focus()` doesn't work on Safari and Firefox Ubuntu so we need\n\t\t\t// to use this hack with `location.replace()` instead.\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst history_state = history.state;\n\n\t\t\t\tresetting_focus = true;\n\t\t\t\tlocation.replace(`#${id}`);\n\n\t\t\t\t// if we're using hash routing, we need to restore the original hash after\n\t\t\t\t// setting the focus with `location.replace()`. Although we're calling\n\t\t\t\t// `location.replace()` again, the focus won't shift to the new hash\n\t\t\t\t// unless there's an element with the ID `/pathname#hash`, etc.\n\t\t\t\tif (app.hash) {\n\t\t\t\t\tlocation.replace(url.hash);\n\t\t\t\t}\n\n\t\t\t\t// but Firefox has a bug that sets the history state to `null` so we\n\t\t\t\t// need to restore it after.\n\t\t\t\t// See https://bugzilla.mozilla.org/show_bug.cgi?id=1199924\n\t\t\t\thistory.replaceState(history_state, '', url.hash);\n\n\t\t\t\t// Scroll management has already happened earlier so we need to restore\n\t\t\t\t// the scroll position after setting the sequential focus navigation starting point\n\t\t\t\tscrollTo(x, y);\n\t\t\t\tresetting_focus = false;\n\t\t\t});\n\t\t} else {\n\t\t\t// If the ID doesn't exist, we try to mimic browsers' behaviour as closely\n\t\t\t// as possible by targeting the first scrollable region. Unfortunately, it's\n\t\t\t// not a perfect match — e.g. shift-tabbing won't immediately cycle up from\n\t\t\t// the end of the page on Chromium\n\t\t\t// See https://html.spec.whatwg.org/multipage/interaction.html#get-the-focusable-area\n\t\t\tconst root = document.body;\n\t\t\tconst tabindex = root.getAttribute('tabindex');\n\n\t\t\troot.tabIndex = -1;\n\t\t\t// @ts-expect-error options.focusVisible is only supported in Firefox\n\t\t\t// See https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#browser_compatibility\n\t\t\troot.focus({ preventScroll: true, focusVisible: false });\n\n\t\t\t// restore `tabindex` as to prevent `root` from stealing input from elements\n\t\t\tif (tabindex !== null) {\n\t\t\t\troot.setAttribute('tabindex', tabindex);\n\t\t\t} else {\n\t\t\t\troot.removeAttribute('tabindex');\n\t\t\t}\n\t\t}\n\n\t\t// capture current selection, so we can compare the state after\n\t\t// snapshot restoration and afterNavigate callbacks have run\n\t\tconst selection = getSelection();\n\n\t\tif (selection && selection.type !== 'None') {\n\t\t\t/** @type {Range[]} */\n\t\t\tconst ranges = [];\n\n\t\t\tfor (let i = 0; i < selection.rangeCount; i += 1) {\n\t\t\t\tranges.push(selection.getRangeAt(i));\n\t\t\t}\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (selection.rangeCount !== ranges.length) return;\n\n\t\t\t\tfor (let i = 0; i < selection.rangeCount; i += 1) {\n\t\t\t\t\tconst a = ranges[i];\n\t\t\t\t\tconst b = selection.getRangeAt(i);\n\n\t\t\t\t\t// we need to do a deep comparison rather than just `a !== b` because\n\t\t\t\t\t// Safari behaves differently to other browsers\n\t\t\t\t\tif (\n\t\t\t\t\t\ta.commonAncestorContainer !== b.commonAncestorContainer ||\n\t\t\t\t\t\ta.startContainer !== b.startContainer ||\n\t\t\t\t\t\ta.endContainer !== b.endContainer ||\n\t\t\t\t\t\ta.startOffset !== b.startOffset ||\n\t\t\t\t\t\ta.endOffset !== b.endOffset\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if the selection hasn't changed (as a result of an element being (auto)focused,\n\t\t\t\t// or a programmatic selection, we reset everything as part of the navigation)\n\t\t\t\t// fixes https://github.com/sveltejs/kit/issues/8439\n\t\t\t\tselection.removeAllRanges();\n\t\t\t});\n\t\t}\n\t}\n}\n\n/**\n * @template {import('@sveltejs/kit').NavigationType} T\n * @param {import('./types.js').NavigationState} current\n * @param {import('./types.js').NavigationIntent | undefined} intent\n * @param {URL | null} url\n * @param {T} type\n */\nfunction create_navigation(current, intent, url, type) {\n\t/** @type {(value: any) => void} */\n\tlet fulfil;\n\n\t/** @type {(error: any) => void} */\n\tlet reject;\n\n\tconst complete = new Promise((f, r) => {\n\t\tfulfil = f;\n\t\treject = r;\n\t});\n\n\t// Handle any errors off-chain so that it doesn't show up as an unhandled rejection\n\tcomplete.catch(() => {});\n\n\t/** @type {(import('@sveltejs/kit').Navigation | import('@sveltejs/kit').AfterNavigate) & { type: T }} */\n\tconst navigation = /** @type {any} */ ({\n\t\tfrom: {\n\t\t\tparams: current.params,\n\t\t\troute: { id: current.route?.id ?? null },\n\t\t\turl: current.url\n\t\t},\n\t\tto: url && {\n\t\t\tparams: intent?.params ?? null,\n\t\t\troute: { id: intent?.route?.id ?? null },\n\t\t\turl\n\t\t},\n\t\twillUnload: !intent,\n\t\ttype,\n\t\tcomplete\n\t});\n\n\treturn {\n\t\tnavigation,\n\t\t// @ts-expect-error\n\t\tfulfil,\n\t\t// @ts-expect-error\n\t\treject\n\t};\n}\n\n/**\n * TODO: remove this in 3.0 when the page store is also removed\n *\n * We need to assign a new page object so that subscribers are correctly notified.\n * However, spreading `{ ...page }` returns an empty object so we manually\n * assign to each property instead.\n *\n * @param {import('@sveltejs/kit').Page} page\n */\nfunction clone_page(page) {\n\treturn {\n\t\tdata: page.data,\n\t\terror: page.error,\n\t\tform: page.form,\n\t\tparams: page.params,\n\t\troute: page.route,\n\t\tstate: page.state,\n\t\tstatus: page.status,\n\t\turl: page.url\n\t};\n}\n\n/**\n * @param {URL} url\n * @returns {URL}\n */\nfunction decode_hash(url) {\n\tconst new_url = new URL(url);\n\t// Safari, for some reason, does change # to %23, when entered through the address bar\n\tnew_url.hash = decodeURIComponent(url.hash);\n\treturn new_url;\n}\n\n/**\n * @param {URL} url\n * @returns {string}\n */\nfunction get_id(url) {\n\tlet id;\n\n\tif (app.hash) {\n\t\tconst [, , second] = url.hash.split('#', 3);\n\t\tid = second ?? '';\n\t} else {\n\t\tid = url.hash.slice(1);\n\t}\n\n\treturn decodeURIComponent(id);\n}\n\nif (DEV) {\n\t// Nasty hack to silence harmless warnings the user can do nothing about\n\tconst console_warn = console.warn;\n\tconsole.warn = function warn(...args) {\n\t\tif (\n\t\t\targs.length === 1 &&\n\t\t\t/<(Layout|Page|Error)(_[\\w$]+)?> was created (with unknown|without expected) prop '(data|form)'/.test(\n\t\t\t\targs[0]\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tconsole_warn(...args);\n\t};\n\n\tif (import.meta.hot) {\n\t\timport.meta.hot.on('vite:beforeUpdate', () => {\n\t\t\tif (errored) {\n\t\t\t\tlocation.reload();\n\t\t\t}\n\t\t});\n\t}\n}\n"],"names":["subscriber_queue","writable","value","start","noop","stop","subscribers","set","new_value","safe_not_equal","run_queue","subscriber","i","update","fn","subscribe","run","invalidate","HttpError","status","body","Redirect","location","SvelteKitError","text","message","normalize_path","path","trailing_slash","decode_pathname","pathname","decode_params","params","key","strip_hash","href","hash","values","buffer","base64_decode","encoded","binary","bytes","native_fetch","input","init","cache","build_selector","initial_fetch","resource","opts","selector","script","ttl","subsequent_fetch","resolved","cached","parse","nodes","server_loads","dictionary","matchers","layouts_with_server_load","id","leaf","layouts","errors","pattern","parse_route_id","route","match","exec","n","create_layout_loader","create_leaf_loader","uses_server_data","get","stringify","data","SNAPSHOT_KEY","SCROLL_KEY","STATES_KEY","PAGE_URL_KEY","HISTORY_INDEX","NAVIGATION_INDEX","PRELOAD_PRIORITIES","origin","resolve_url","url","baseURI","baseTags","scroll_state","link_option","element","name","levels","parent_element","parent","find_anchor","target","get_link_info","a","base","uses_hash_router","external","is_external_url","download","get_router_options","keepfocus","noscroll","preload_code","preload_data","reload","replace_state","el","get_option_state","notifiable_store","store","ready","notify","val","old_value","updated_listener","create_updated_store","timeout","check","res","assets","updated","version","hash_routing","load_css","deps","valid_layout_exports","valid_layout_server_exports","compact","arr","get_status","error","get_message","page","navigating","is_legacy","onMount","#route","$.state","#url","new_page","tick","svelte","ICON_REL_ATTRIBUTES","scroll_positions","storage.get","snapshots","stores","update_scroll_positions","index","clear_onward_history","current_history_index","current_navigation_index","native_navigation","replace","update_service_worker","registration","routes","default_layout_loader","default_error_loader","container","app","invalidated","components","load_cache","reroute_cache","before_navigate_callbacks","on_navigate_callbacks","after_navigate_callbacks","current","hydrated","started","autoscroll","is_navigating","hash_navigating","has_navigated","force_invalidation","root","token","preload_tokens","query_map","_app","_target","hydrate","scroll","restore_scroll","_hydrate","navigate","decode_hash","_start_router","reset_invalidation","capture_snapshot","c","restore_snapshot","persist_state","storage.set","_goto","options","redirect_count","nav_token","query_keys","push_invalidated","svelte.tick","_preload_data","intent","preload","load_route","result","_preload_code","get_navigation_intent","load","initialize","style","navigation","get_navigation_result_from_branch","branch","form","slash","node","branch_node","clone_page","data_changed","p","prev","load_node","loader","server_data_node","uses","resolve_fetch_url","requested","promise","has_changed","parent_changed","route_changed","url_changed","search_params_changed","tracked_params","param","create_data_node","previous","diff_search_params","old_url","new_url","changed","old_values","new_values","preload_error","invalidating","loaders","get_page_key","branch_promises","j","err","handle_error","error_load","load_nearest_error_page","server_fallback","load_root_error_page","root_layout","root_error","get_rerouted_url","rerouted","tmp","get_url_path","_before_navigate","type","delta","event","should_block","nav","create_navigation","cancellable","popped","state","accept","block","prev_token","previous_history_index","previous_navigation_index","navigation_result","change","entry","after_navigate","cleanup","activeElement","deep_linked","get_id","top","left","changed_focus","reset_focus","setup_preload","mousemove_timeout","current_a","current_priority","tap","observer","entries","priority","interacted","same_url","e","nonhash","same_pathname","current_hash","update_url","fulfil","submitter","event_form","resetting_focus","history_index","navigation_index","is_hash_change","link","node_ids","server_route","server_data_nodes","parsed_route","deserialize_uses","autofocus","x","y","history_state","tabindex","selection","ranges","b","reject","complete","f","r","second"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]}